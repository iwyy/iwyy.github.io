<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql高性能索引]]></title>
    <url>%2F2018%2Fmysql-index.html</url>
    <content type="text"><![CDATA[索引类型索引由很多类型，可以为不同场景提供更好的性能，在mysql中索引是存储引擎层而不是服务器层实现的。不同存储引擎的索引工作方式也不一样，也不是所有存储引擎支持所有索引类型，其底层实现也可能不同。B-Tree索引使用B-Tree数据结构来存储数据，大多数mysql引擎都支持这种索引，Archive引擎是个例外。存储引擎以不同的方式使用B-Tree索引，性能也各不同，各有优劣。例如，MyISAM使用前缀压缩使得索引更小，但InnoDB按照原数据格式进行存储。再如MyISAM索引通过数据的屋里位置引用被索引的行，而InnoDB根据主键引用被索引的行。B-Tree索引对如下类型的查询有效（假设：key(name,dob)）：1、全值匹配比如查找姓名为Allen的人，出生于1996年的人2、匹配最左前缀比如查找姓名为Allen的人，即只是用索引的第一列3、匹配列前缀比如查找所有以J开头的姓的人。这里也只使用了索引的第一列。4、匹配范围值比如查找姓在Allen和Barrymore之间的人。这里也只使用了索引的第一列。5、匹配某一列并范围匹配另一列比如查找姓名Allen的人，出生1996到2005的人B-Tree支持“值访问索引的查询”，即查询只需要访问索引，而不需要访问数据行，也叫做“覆盖索引”。因为索引树中的节点是有序的，所以除了按值查找之外，索引还可以用order by操作。哈希索引哈希索引基于哈希表实现，只有精确匹配索引所有的列的查询才有效。mysql中只有Memory引擎显式的支持哈希索引，也是Memory的默认索引类型,Memory引擎同时也支持B-Tree索引。Memory引擎是支持费唯一哈希索引的，如果多个列的哈希值相同，索引会以链表的方式存放记录指针到同一个哈希条目中。哈希索引查询的速度非常快，但是哈希索引也有很多限制：1、哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。2、哈希索引数据不是按照索引值顺序存储的，所以也无法用于排序3、哈希索引不支持部分索引列的匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。4、哈希索引只支持等值比较查询,包括=、IN()、&lt;=&gt;，不支持范围查询。5、哈希索引的数据非常快，除非有很多哈希冲突，如果冲突很多的时候索引维护操作的代价也高，查找遍历链表代价也大。因为这些限制，哈希索引只适用于某些特定的场合，而一旦适合则带来的性能提升非常显著。InnoDB引擎有个特殊的功能叫做“自适应哈希索引”。当InnoDB注意到某些索引值被使用的非常频繁时，它会在内存中基于B-tree索引之上再创建一个哈希索引，这样就让B-Tree也有哈希索引的一些优点，比如快速的哈希查找，这是个完全自动的内部行为用户无法控制，但可以关闭该功能。如果存储引擎不支持哈希索引，可以模拟想InnoDB一样创建哈希索引，这样可以享受一些哈希索引的遍历，比如只需要很小的索引就可以为超长的键创建索引，思路很简单：在B-Tree基础上创建一个伪哈希索引。例如：select id from url where url=”http://www.mysql.com“;删除原来url列上的所以，新增一个url_rcc列，使用crc32做哈希，使用下面的方式查询：select id from url where url = “http://www.mysql.com“and url_rcc = crc32(“http://www.mysql.com“);这样做新能会非常高，因为mysql优化器会使用这个选择性很高而体积很小的基于url_crc列的索引来完成查找。这样做需要维护哈希值可以使用触发器或者手动。如果这种方式不要使用sha1()和md5()作为哈希函数，因为这两个函数计算出来的哈希值非常长。空间数据索引（R-Tree）MyISAM表支持空间所以呢，可以用作地理数据存储。全文索引它是查找文本中的关键词，而不是直接比较索引中的值。索引的优点1、大大减少了服务器需要扫描的数据量。2、可以帮助服务器避免排序和临时表。3、可以随机I/O变为顺序I/O。高性能索引策略独立的列“独立的列”是指索引列不能使表达式的一部分也不能是函数的参数例如：select id from aa where id+1=5;正确写法：select id from aa where id=4;前缀索引和索引的选择性有时候需要索引很长的字符列，这会让索引变得大且慢。一个策略是上面提到的通过模拟哈希索引，另一种就是前缀索引。通常可以索引开始的部分字符，这样可以一打打节约索引空间，提高效率。但这样会降低索引的选择性。索引的选择性是指不重复的索引值和数据表的记录总数的比值，范围。索引的选择性越高则查询效率越高，因为可以过滤掉更多的行。唯一索引的选择性是1，性能是最好的。创建前缀索引：alter table aa add key(name(7))mysql前缀索引无法做order by 和group by，也无法使用前缀索引做覆盖扫描。多列索引给多个列创建独立的单例索引，多列索引大部分情况下并不能提高mysql的查询性能，mysql5.0之后更是引入一种叫索引合并的策略，一定程度上可以使用表上的多个单列索引来定位指定的行。索引合并策略是一种优化的结果，但实际上更多的说明了表上的索引建的非常糟糕：1、当出现服务器对多个索引做相交操作（通常有多个and条件），通常以位置需要一个包含所有相关列的多列索引，而不是多个多里的单列索引。2、当服务器需要对多个索引做联合操作时（通常是多个or条件）。选择合适的索引列顺序讲选择性最高的列放到索引最前列。聚簇索引和非聚簇索引聚簇索引并不是一个单独的索引类型，而是一种数据存储方式。B+Tree结构都可以用在MyISAM和InnoDB上。mysql中，不同的存储引擎对索引的实现方式不同。B+Tree示意图聚集索引和非聚集索引原理图聚簇索引聚簇索引的数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的。聚簇索引要比非聚簇索引查询效率高很多。聚集索引这种主+辅索引的好处是，当发生数据行移动或者页分裂时，辅助索引树不需要更新，因为辅助索引树存储的是主索引的主键关键字，而不是数据具体的物理地址。InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上，若使用”where id = 14”这样的条件查找主键，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。若对Name列进行条件搜索，则需要两个步骤：第一步在辅助索引B+树中检索Name，到达其叶子节点获取对应的主键。第二步使用主键在主索引B+树种再执行一次B+树检索操作，最终到达叶子节点即可获取整行数据。非聚簇索引非聚集索引，类似于图书的附录，那个专业术语出现在哪个章节，这些专业术语是有顺序的，但是出现的位置是没有顺序的。每个表只能有一个聚簇索引，因为一个表中的记录只能以一种物理顺序存放。但是，一个表可以有不止一个非聚簇索引。MyISAM的是非聚簇索引，B+Tree的叶子节点上的data，并不是数据本身，而是数据存放的地址。主索引和辅助索引没啥区别，只是主索引中的key一定得是唯一的。这里的索引都是非聚簇索引。非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树覆盖索引覆盖索引又可以称为索引覆盖。解释一： 就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。解释二： 索引是高效找到行的一个方法，当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引。解释三：是非聚集组合索引的一种形式，它包括在查询里的Select、Join和Where子句用到的所有列（即建立索引的字段正好是覆盖查询语句[select子句]与查询条件[Where子句]中所涉及的字段，也即，索引包含了查询正在查找的所有数据）不是所有类型的索引都可以成为覆盖索引，覆盖索引必须要存储索引列的值，而哈希索引、空间索引、全文索引都不存储列的值，所以mysql只能用B-Tree索引做覆盖索引。不同的存储引擎实现覆盖索引的方式也不同，而且也不是所有的存储引擎都支持覆盖索引（memory存储引擎就不支持覆盖索引，不排除未来支持）覆盖索引的好处1、索引条目通常远小于数据行大小，减少数据访问和I/O开销。2、由于InnoDB聚簇索引，覆盖索引对InnoDb表特别有用，InnoDb的二级索引在叶子节点中保存了行的主键值，如果二级主键可以覆盖查询，可以避免对主键索引的二次查询。使用索引描述来排序mysql使用两种方式可以生成有序的结果：通过排序操作或者按索引顺序扫描。如果explain出来的type列值为“index”，则说明mysql使用了索引扫描来做排序。mysql可以使用同一个索引既满足排序有用于查找，如果可能，设计索引时应该尽可能地同时满足这两种任务。只有当索引的列顺序和order by 子句的顺序完全一致，并且所有列的排序方向（要么都是desc，要么都是asc）都一样时，mysql才能使用索引来对结果做排序。如果查询多张关联表，则只有当order by 子句引用的字段全部为第一个表时，才能使用做排序。有一种情况下order by子句可以不满足索引的最左前缀的要求，就是前导列为常量的时候。如果where子句或者join子句中这些列制定了常量就可以弥补索引的不足。表指定索引 key（a,b,c）例子：where a=1 order by b,c;where a=1 order by b;where a&gt;1 order by a,b;一下是错误的例子：where a =1 order by b desc,c asc;where a =1 order by c;where a&gt;1 order by b,c;where a =1 and b in(1,2) order by c;冗余和重复索引mysql允许在相同的列上创建多个索引。mysql需要单独维护重复的索引，这会影响性能。应该避免创建重复索引，发现以后应该立即移除。下面的代码创建了三个重复的索引：create table text(id int not null PRIMARY KEY,UNIQUE(ID),INDEX(ID))ENGIN=InnoDB;冗余索引和重复索引有些不同，如果创建了索引(A,B),在创建索引(A)就是冗余索引，因为这只是前一个索引的前缀索引。如果在创建(B,A),则不是冗余索引，(B)也不是。冗余索引通常只是对B-tree索引来说的。大多数情况不需要冗余索引，但也有出于性能考虑需要冗余索引，因为扩展已有的索引会导致变得太大，从而影响其他使用该索引的查询的性能。表中的索引越多插入速度回越慢，一般来说，增加新索引将会导致insert、update、delete等操作的速度变慢，特别是新增索引达到了内存瓶颈的时候。未使用的索引有些服务器永远用不到的索引。建议考虑删除。怎样检测未使用的索引请google或者百度。索引和锁索引可以让查询锁定更少的行。InnoDB只有在访问行的时候才会对其加锁，而索引能减少InnoDB访问的行数，从而减少锁的数量。MySQL索引失效的几种情况索引不存储null值更准确的说，单列索引不存储null值，复合索引不存储全为null的值。索引不能存储Null，所以对这列采用is null条件时，因为索引上根本没Null值，不能利用到索引，只能全表扫描。为什么索引列不能存Null值？将索引列值进行建树，其中必然涉及到诸多的比较操作。Null值的特殊性就在于参与的运算大多取值为null。这样的话，null值实际上是不能参与进建索引的过程。也就是说，null值不会像其他取值一样出现在索引树的叶子节点上。不适合键值较少的列（重复数据较多的列）如果某个数据列里包含着许多重复的值，就算为它建立了索引也不会有很好的效果。比如说，如果某个数据列里包含了净是些诸如“0/1”或“Y/N”等值，就没有必要为它创建一个索引。前导模糊查询不能利用索引(like ‘%XX’或者like ‘%XX%’)假如有这样一列code的值为’AAA’,’AAB’,’BAA’,’BAB’ ,如果where code like ‘%AB’条件，由于前面是模糊的，所以不能利用索引的顺序，必须一个个去找，看是否满足条件。这样会导致全索引扫描或者全表扫描。如果是这样的条件where code like ‘A % ‘，就可以查找CODE中A开头的CODE的位置，当碰到B开头的数据时，就可以停止查找了，因为后面的数据一定不满足要求。这样就可以利用索引了。in 失效的情况eq_range_index_dive_limit这个参数影响in是否使用索引， 5.6 默认值是10 5.7 默认值是 200mysql自动优化如果mysql估计使用全表扫描要比使用索引快,则不使用索引。如果需要使用索引可以强制使用索引。mysql强制使用索引:force index(索引名或者主键PRI)例如:select from table force index(PRI) limit 2;(强制使用主键)select from table force index(ziduan1_index) limit 2;(强制使用索引”ziduan1_index”)select from table force index(PRI,ziduan1_index) limit 2;(强制使用索引”PRI和ziduan1_index”)mysql禁止某个索引：ignore index(索引名或者主键PRI)例如:select from table ignore index(PRI) limit 2;(禁止使用主键)select from table ignore index(ziduan1_index) limit 2;(禁止使用索引”ziduan1_index”)select from table ignore index(PRI,ziduan1_index) limit 2;(禁止使用索引”PRI,ziduan1_index”)隐式转换索引字段类型使用explain extended select uid from user where mo = 123445 limit 0,1原因：索引隐式转换,mo是varchar类型,这里使用的是数字,索引使用无效（数据类型以及字符集定义不当导致）在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了索引也不会使用索引列不能参与计算保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);Explain优化查询检测禁止缓存在测试sql语句性能时有时需要禁用缓存， 下面是几种不同的实现方式， 供参考使用：通过sql的select语句中添加SQL_NO_CACHE修饰来禁用查询缓存SELECT SQL_NO_CACHE * FROM TABLE_NAME通过set 变量来实现禁用缓存SET SESSION query_cache_type=0;通过reset指令来重置缓存RESET QUERY CACHE以上三种方法都可以达到测试mysql性能时清缓存的目的。MySQL执行计划调用方式1.EXPLAIN SELECT ……变体：2.EXPLAIN EXTENDED SELECT ……将执行计划”反编译”成SELECT语句，运行SHOW WARNINGS可得到被MySQL优化器优化后的查询语句3.EXPLAIN PARTITIONS SELECT ……用于分区表的EXPLAIN生成QEP的信息关于explain选项下面是一个实例：123456mysql&gt; explain select products_id from products limit 1;+----+-------------+----------+-------+---------------+---------+---------+------+------+-------------+| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+-------------+----------+-------+---------------+---------+---------+------+------+-------------+| 1 | SIMPLE | products | index | NULL | PRIMARY | 4 | NULL | 3113 | Using index |+----+-------------+----------+-------+---------------+---------+---------+------+------+-------------+ idMySQL Query Optimizer选定的执行计划中查询的序列号。表示查询中执行select子句或操作表的顺序，id值越大优先级越高，越先被执行。id相同，执行顺序由上至下 select_type1、SIMPLE：简单的select查询，不使用union及子查询2、PRIMARY：最外层的select查询3、UNION：UNION中的第二个或随后的select查询，不依赖于外部查询的结果集4、DEPENDENT UNION：UNION中的第二个或随后的select查询，依赖于外部查询的结果集5、UNION RESULT： UNION查询的结果集SUBQUERY子查询中的第一个select查询，不依赖于外部查询的结果集6、DEPENDENT SUBQUERY:子查询中的第一个select查询，依赖于外部查询的结果集DERIVED用于from子句里有子查询的情况。 MySQL会递归执行这些子查询，把结果放在临时表里。7、UNCACHEABLE SUBQUERY:结果集不能被缓存的子查询，必须重新为外层查询的每一行进行评估8、UNCACHEABLE UNION:UNION中的第二个或随后的select查询，属于不可缓存的子查询 table1、system：表仅有一行(系统表)。这是const连接类型的一个特例。2、const：const用于用常数值比较PRIMARY KEY时。当查询的表仅有一行时，使用system。3、eq_ref：除const类型外最好的可能实现的连接类型。它用在一个索引的所有部分被连接使用并且索引是UNIQUE或PRIMARY KEY， 对于每个索引键，表中只有一条记录与之匹配。4、ref：连接不能基于关键字选择单个行，可能查找到多个符合条件的行。叫做ref是因为索引要跟某个参考值相比较。 这个参考值或者是一个常数，或者是来自一个表里的多表查询的结果值。5、ref_or_null：如同ref，但是MySQL必须在初次查找的结果里找出null条目，然后进行二次查找。6、index_merge：说明索引合并优化被使用了。7、unique_subquery：在某些IN查询中使用此种类型，而不是常规的ref： value IN (SELECT primary_key FROM single_table WHERE some_expr) index_subquery在某些IN查询中使用此种类型，与unique_subquery类似，但是查询的是非唯一性索引： value IN (SELECT key_column FROM single_table WHERE some_expr)8、range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。 当使用=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range。9、index：全表扫描，只是扫描表的时候按照索引次序进行而不是行。主要优点就是避免了排序，但是开销仍然非常大。10、all：最坏的情况，从头到尾全表扫描 type表示MySQL在表中找到所需行的方式，又称“访问类型”，常见类型如下: ALL, index, range, ref, eq_ref, const, system, NULL从左到右，性能从最差到最好a. ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行b. index：Full Index Scan，index与ALL区别为index类型只遍历索引树c. range:索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行。显而易见的索引范围扫描是带有between或者where子句里带有&lt;, &gt;查询。当mysql使用索引去查找一系列值时，例如IN()和OR列表，也会显示range（范围扫描）,当然性能上面是有差异的。d. ref：使用非唯一索引扫描或者唯一索引的前缀扫描，返回匹配某个单独值的记录行e. eq_ref：类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件f. const、system：当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量g. NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。 possible_keys指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用,如果为空，说明没有可用的索引 key显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULLmysql实际从possible_key选择使用的索引。如果为null，则没有使用索引。很少的情况下，mysql会选择优化不足的索引。这种情况下，可以在select语句中使用use index（indexname）来强制使用一个索引或者用ignore index（indexname）来强制mysql忽略索引 key_len表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）在不损失精确性的情况下，长度越短越好 ref表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值 rows表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数 extra1、Distinct一旦mysql找到了与行相联合匹配的行，就不再搜索了。2、Not existsmysql 优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。3、Range checked for eachRecord（index map:#）没有找到理想的索引，因此对于从前面表中来的每一个行组合，mysql检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一。4、Using filesort表示MySQL会对结果使用一个外部索引排序，而不是从表里按索引次序读到相关内容。可能在内存或者磁盘上进行排序。MySQL中无法利用索引完成的排序操作称为“文件排序”。5、Using index该值表示相应的select操作中使用了覆盖索引（Covering Index）,列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候。6、Using temporarymysql需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询这个值表示使用了内部临时(基于内存的)表。一个查询可能用到多个临时表。有很多原因都会导致MySQL在执行查询期间创建临时表。两个常见的原因是在来自不同表的上使用了DISTINCT,或者使用了不同的ORDER BY和GROUP BY列。可以强制指定一个临时表使用基于磁盘的MyISAM存储引擎。这样做的原因主要有两个：1)内部临时表占用的空间超过min(tmp_table_size，max_heap_table_size)系统变量的限制2)使用了TEXT/BLOB 列7、Using where使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题。。许多where条件里涉及索引中的列，当（并且如果）它读取索引时，就能被存储引擎检验，因此不是所有带where字句的查询都会显示”Using where”。有时”Using where”的出现就是一个暗示：查询可受益与不同的索引。8、Using join buffer改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。9、Impossible where这个值强调了where语句会导致没有符合条件的行。10、 Select tables optimized away这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行.11、Index merges当MySQL 决定要在一个给定的表上使用超过一个索引的时候，就会出现以下格式中的一个，详细说明使用的索引以及合并的类型。Using sort_union(…)Using union(…)Using intersect(…) 总结：• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况• EXPLAIN不考虑各种Cache• EXPLAIN不能显示MySQL在执行查询时所作的优化工作• 部分统计信息是估算的，并非精确值• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。参考（1）《高性能MySQL》（2）《数据结构与算法分析》]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql使用经典案例]]></title>
    <url>%2F2018%2Fmysql-classic-case.html</url>
    <content type="text"><![CDATA[索引最佳实践无索引案例（添加索引没生效）索引字段类型使用explain extended select uid from user where mo = 123445 limit 0,1原因：索引隐式转换,mo是varchar类型,这里使用的是数字,索引使用无效（数据类型以及字符集定义不当导致）分页优化案例 数据库锁ddl操作需要注意慢查询 延迟 参数优化cpu 100% conn 100% iops 100%disk 100%mem 100% 参考视频：云数据库使用十大经典案例]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剧场版《Fate/stay night [Heaven's Feel] I.presage flower》主题曲]]></title>
    <url>%2F2018%2Ffate.html</url>
    <content type="text"><![CDATA[作曲 : 梶浦由記作词 : 梶浦由記その日々は夢のように那些如梦似幻的日子已然逝去臆病な微笑みと徒然留下的是やさしい爪を怯懦的笑容残して行った还有温柔的指尖退屈な花びらのように宛如毫无生趣的花瓣くるしみを忘れて将痛苦忘却貴方の背中でそっと在你的背后悄然泣いて笑った流着泪笑了帰らぬ日々を思うような似是怀念不再归来的往日一般奇妙な愛しさに満ちた于满盈着奇妙爱怜的箱庭の中で庭园盆景之中息をひそめ敛藏气息季節が行くことを忘れ季节忘记流转静かな水底のような置身于寂静水底般的時間にいた时光之中冷たい花びら冰冷的花瓣夜に散り咲く在夜晚绽放纷飞まるで白い雪のようだね好似白雪一般呢切なく那些揪心地貴方の上に降った飘落你身的かなしみを全て所有悲伤払いのけてあげたいだけ我不过是想为你将其尽数拂去貴方のこと傷つけるもの全て伤害你的一切事物私はきっと許すことは出来ない我绝对无法宽恕優しい日々那些安详的日子涙が出るほど我想回到那时帰りたい到了泪水夺眶而出的程度貴方と二人で与你一同見上げた仰望过的花瓣花びらが散った已凋零飞散月が雲に隠れて月亮隐匿于云层之中貴方は道を失くして令你迷失道路泣き出しそうな你的双眼目をしてた泫然欲泣ぎざぎざなこころだって纵然是你我两人那残破如锯齿的心ふたつ合わせてみれば若能得以结合優しいものがきっと一定能够孕育出生まれてくるわ纯真美好之物啊私を傷つけるものを伤害我的事物貴方は許さないでくれた你未曾给予宽恕それだけでいいの仅是如此我已满足戯れに伸ばされた嬉闹中你向我伸出的手貴方の手にしがみ付いた我将其紧紧握住諦めていた世界に为已然断念的世界やがて温かな灯がともる须臾间点亮温暖的灯火冷たい花びら冰冷的花瓣夜を切り裂く劈裂长夜私が摘んだ光をみんな束ねて我将采撷的所有光芒包捆成束貴方の上に全部只是想要由你之上よろこびのように宛如庆贺地撒き散らしてあげたいだけ将光芒尽数为你挥洒わるいことをしたらきっと貴方が如若我犯下歹行 你一定会对我发怒怒ってくれると約束したよね我们有过这样的约定对吧だからきっともう一度因而你一定能再度私を見つけてくれるよね找寻到我的对吧寂しいところに我已经不必置身于もういなくていいね那孤独寂寥之地了对吧一人で我孤身一人見上げた仰望过的花瓣花びらが散った已凋零飞散]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优先队列(堆)]]></title>
    <url>%2F2017%2Fpriority-queue.html</url>
    <content type="text"><![CDATA[优先队列(priority queue)普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征。模型优先队列允许至少两种操作的数据结构：insert和deleteMin（删除最小者），它是找出、返回并删除优先队列中最小的元素。insert等价于入队，deleteMin等价出队。二叉堆结构性质二叉堆是一种特殊的堆，二叉堆是完全填满的二元树（二叉树）或者是近似完全填满的二元树（二叉树）。二叉堆有两种：最大堆和最小堆。最大堆：父结点的键值总是大于或等于任何一个子节点的键值；最小堆：父结点的键值总是小于或等于任何一个子节点的键值。因为完全二叉树很有规律，所以它可以用一个数组标识而不需要使用链。后面始终把堆画成树，具体实现将使用简单的数组一个堆结构将由一个（comparable对象的）数组和一个代表当前堆大小的整数组成。堆序性质让操作快速执行的性质是堆序性质(heap-order property)。由于想要快速找出最小元素，因此最小元素应该在根上。因此以常数时间得到附加操作findMin。基本的堆操作所有的工作都需要保证始终保持堆序性质。insert操作为将一个元素X插入到堆中，在下一个可用位置创建一个空穴，如果X可以放在该空穴中而并不破坏堆的序，那么插入完成。否则，把空穴的父节点上的元素移入该空穴中，这样，空穴就朝着跟的方向向上冒一步，继续该过程直到X能被放入空穴为止。deleteMin删除根元素，根节点建立一个空穴，将空穴的两个儿子中较小者移入空穴，这样就把空穴乡下推了一层，重复该步骤直到X可以被放入空穴中。需要考虑堆中存在偶数个元素的时候，将遇到一个节点只有一个儿子的情况优先队列的应用选择问题java标准库中的优先队列未完待续]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[散列]]></title>
    <url>%2F2017%2Fhash.html</url>
    <content type="text"><![CDATA[散列散列表的实现常常叫做散列(hashing)。散列是一种用于以常数平均时间执行插入、删除和查找的技术。但是，那些需要元素间任何排序信息的树操作将不会得到有效的支持。散列表散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。哈希函数给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果。但另一方面，散列函数的输入和输出不是一一对应的，如果两个散列值相同，两个输入值很可能是相同的，但不绝对肯定二者一定相等（可能出现哈希碰撞）。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。散列的价值散列的价值在于速度假如键没有按照一定的顺序进行保存，那么查询的时候就只能按照顺序进行线性查询，然而，线性查询是最慢的查询方式。所以，将键值按照一定的顺序排序，并且使用二分查找能购有效的提升速度。散列在此之上，更近一步，他将键保存在数组中(数组的查询速度最快)，用数组来表示键的信息，但是由于Map的容量是可变的，而数组的容量是不变的。要解决这个问题，数组中存的并不是键本身，而是键对象生成的一个数字，将其作为数组的下标，这个数字就是散列码。而这种办法所产生的问题就是下标重复。而我们的解决办法就是配合equals来确定键值。查询的过程首先就是计算散列码，然后用散列码来查询函数(下标)，通常，我们的数组中保存的是值的list，因此，我们计算出散列码之后，通过下表取到的对应部分的list，然后通过equals就可以快速找到键值。处理冲突方法分离链接法其做法是将散列到同一个值的所有元素保存到一个表中。执行一次查找，使用散列函数来确定究竟遍历哪个链表。然后在被确定的链表中执行一次查找。执行一次插入，检查响应的链表看看该元素是否已经处在适当的位置(如果允许插入重复元素，那么要留出一个额外的域，这个域当出现匹配事件时增1)。如果这个元素是新的元素，那么它将被插入到链表前端，这个不仅因为方便，还因为常常发生这样的事实：新近插入的元素最有可能不久又被访问。除链表外，任何方案都可以解决冲突现象，一颗二叉树或者另一个散列表都可以，但是最好的解决方案是散列函数是最好的，那么所有的链表都应该是短的。开放定址法分离链接散列算法的缺点是使用一些链表。由于给新单元分配地址需要时间，因此倒着算法的速度有些减慢，同时算法实际上还要求对第二种数据结构的实现。另一种不用链表解决冲突的方法是尝试另外一些单元，知道找出空的单元为止。因为所有大数据都要放入表内，所以这种解决方案所需要的表要比分离链接散列的表大。一般来说对于不适用分离链接的散列表来说其装填因子应该低于0.5，这样的表叫做侦探散列表。这种通常的冲突解决方案有三种。线性侦探法平均探测法双散列法再散列法对于使平方探测的开放定址散列法，如果散列表填的太满，那么操作的运行时间将开始消耗过长，且插入操作可能失败。此时，一种解决方案是建立另外一个大约两倍的大的表，而且使用一个相关的新散列函数，扫描整个原始散列表，计算每个元素的新散列值并将其插入到新表中，整个操作就是叫做再散列。java标准库中的散列表标准库包括Set和Map的散列表的实现：HashSet和HashMap类。HashSet中的项必须提供equals和hashCode方法。它们通常是用分离链接散列实现的。散列表操作中费时多的部分就是计算hashCode方法，String类中的hashCode有个重要优化：每个String对象内部都存储它的hashCode值，初始为0，若hashCode方法被调用，那么就记住这个值，ru过hashCode对同一个String对象第二次计算，则可以避免昂贵的重新计算，这个技巧叫做闪存散列代码。闪存散列代码之所以有效，是因为String类是不可改变的：要是String允许变化，那么它就会使hashCode无效，而重置回0.可扩散列处理数据量太大以至于装不进主存的情况。查找性能分析散列表的查找过程基本上和造表过程相同。一些关键码可通过散列函数转换的地址直接找到，另一些关键码在散列函数得到的地址上产生了冲突，需要按处理冲突的方法进行查找。在介绍的三种处理冲突的方法中，产生冲突后的查找仍然是给定值与关键码进行比较的过程。所以，对散列表查找效率的量度，依然用平均查找长度来衡量。查找过程中，关键码的比较次数，取决于产生冲突的多少，产生的冲突少，查找效率就高，产生的冲突多，查找效率就低。因此，影响产生冲突多少的因素，也就是影响查找效率的因素。影响产生冲突多少有以下三个因素：1．散列函数是否均匀；处理冲突的方法；3．散列表的装填因子。散列表的装填因子定义为：α= 填入表中的元素个数/散列表的长度α是散列表装满程度的标志因子。由于表长是定值，α与“填入表中的元素个数”成正比，所以，α越大，填入表中的元素较多，产生冲突的可能性就越大；α越小，填入表中的元素较少，产生冲突的可能性就越小。实际上，散列表的平均查找长度是装填因子α的函数，只是不同处理冲突的方法有不同的函数。常用hash算法：（1)MD4（2)MD5（3)SHA-1及其他]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表、栈和队列]]></title>
    <url>%2F2017%2Flist.html</url>
    <content type="text"><![CDATA[ADT抽象数据类型(abstract data type,ADT)是带有一组操作的对象的集合。对于集合ADT，可以有添加、删除、包含等操作表ADT简单数组实现对表的所有操作都可以通过使用数组来实现。虽然数组是有固定容量创建的，但在需要的时候可以使用双倍的容量创建一个不同的数组。许多情形下表是通过在末端进行插入操作的，然后只对数组访问。这种情形下数组是一种恰当的实现。然而如果发生一些插入和删除操作，特别是前端进行，那么数组不是一种好的选择。简单链表为了避免插入和删除的线性开销，需要保证表可以不连续存储，否则表的每个部分都可能需要整体移动。链表是由一系列的节点组成，这些节点不必在内存中相连，每个节点含有表元素和到包含该元素后继元素的节点的链，可以称之为next链，最后一个单元的next链引用null。简单链表删除最后一项比较复杂，因为必须找出指向最后节点的项，把它的next链改成null，然后在更新持有最后节点的链，最好的做法是让每一个节点有一个指向它在表中的前面节点的链称之为双链表java Collection API中的表Collection接口Collection接口扩展了Iterable接口，实现Iterable接口的类拥有增强for循环，都可以使用forEach进行循环遍历123456789public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; &#123; int size(); boolean isEmpty(); void clear(); boolean contains(Object o); Iterator&lt;E&gt; iterator(); boolean add(E e); boolean remove(Object o); &#125; Iterator接口1234567public interface Iterator&lt;E&gt; &#123; boolean hasNext(); E next(); default void remove() &#123; throw new UnsupportedOperationException(&quot;remove&quot;); &#125;&#125; Iterator的remove方法主要优点在于：Collection的remove方法必须先找出需要删除的项。在迭代集合时Collection的remove会抛出ConcurrentModificationException 增强for循环java中的增强for循环实际上编译器会重写成如下所示：1234567891011List&lt;String&gt; list = new ArrayList&lt;&gt;();list.add("abc");for (String s : list) &#123; System.out.println(s);&#125;//等同于上面增强for循环写法Iterator&lt;String&gt; it = list.iterator();while (it.hasNext()) &#123; String s = it.next(); System.out.println(s);&#125; List接口、ArrayList类和LinkedList类1、ArrayList类提供了list ADT的一种可增长数组的实现，其优点在于对get和set的调用花费常数时间，其缺点是插入和删除代价昂贵（除了在末端进行）。2、LinkedList类提供了list ADT的双链表实现，其优点是插入和删除均开销很小，在表的前端和末端添加和删除都是常数时间的操作，其缺点是不容易索引，get的调用是昂贵的（除了get第一个和最后一个）。3、对搜索而言，ArrayList和LinkedList都是低效的，对Collection的contains和remove方法的调用均花费线性时间。4、ArrayList中有个容量的概念，它标识基础数组的大小，在需要的时候会自动扩容保证至少具有表的大小，如果早期知道该大小，可以设置容量足够大的量以避免数组容量以后的扩展，trimToSize可以在所有的ArrayList添加操作完成之后使用以避免浪费空间。5、以下方法对于LinkedList操作整个程序线性时间不是二次时间，对于ArrayList是二次时间，因为对于ArrayList即使迭代器位于需要被删除的节点上，其remove方法仍然是昂贵的，因为数组的项必须要移动12345678public static void remove(List&lt;Integer&gt; list) &#123; Iterator&lt;Integer&gt; iterator = list.iterator(); while (iterator.hasNext()) &#123; if (iterator.next() % 2 == 0) &#123; iterator.remove(); &#125; &#125; &#125; ListIterator接口ListIterator扩展了Iterator接口。1、iterator可以应用于所有的集合，Set、List和Map以及这些集合的子类型。而ListIterator只能用于List及其子类型。2、ListIterator有hasPrevious()和previous()方法，可以实现逆向遍历，但是iterator不可以。3、ListIterator可以定位当前索引的位置，nextIndex()和previousIndex()可以实现。Iterator没有此功能。4、ListIterator有add方法，可以向List中添加对象，而Iterator不能。5、ListIterator可以实现对象的修改，set()方法可以实现。Iterator仅能遍历，不能实现修改。都可以实现删除操作。用例：它可以用来从List的所有的偶数中减去1，对于LinkedList来说，不适用ListIterator的set方法是很难做到的。 简单的ArrayList类的实现只供参考理解，编译器会报错123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111public class MyArrayList&lt;AnyType&gt; implements Iterable&lt;AnyType&gt; &#123; private static final int DEFAULT_CAPACITY = 10; private int theSize; private AnyType[] theItems; public int size() &#123; return theSize; &#125; public boolean isEmpty() &#123; return size() == 0; &#125; //调整容量符合大小 public void trimToSize() &#123; ensureCapacity(size()); &#125; //确保数组大小足够大 public void ensureCapacity(int newCapacity) &#123; if(newCapacity &lt; theSize) return; //复制数据到新数组中 AnyType[] old = theItems; theItems = (AnyType[]) new Object[newCapacity]; for(int i = 0; i &lt;size(); i++) &#123; theItems[i] = old[i]; &#125; &#125; public AnyType get(int index) &#123; if(index &lt; 0 || index &gt;= size()) &#123; throw new ArrayIndexOutOfBoundsException(); &#125; return theItems[index]; &#125; public AnyType set(int index, AnyType newVal) &#123; if(index &lt; 0 || index &gt;= size()) &#123; throw new ArrayIndexOutOfBoundsException(); &#125; AnyType old = theItems[index]; theItems[index] = newVal; return old; &#125; public void add(int index, AnyType x) &#123; //数组不够大，则扩大数组 if(theItems.length == size()) &#123; ensureCapacity(size()*2 + 1); &#125; //从index开始，元素往后移动一位 for(int i = theSize; i &gt; index; i--) &#123; theItems[i] = theItems[i - 1]; &#125; //index位置赋值x theItems[index] = x; theSize++; &#125; public AanyType remove(int index) &#123; AnyType removedItem = theItems[index]; for(int i = index; i &lt; size(); i++) &#123; //从index位置开始，所有元素都往前移动一位 theItems[i] = theItems[i + 1]; &#125; theSize--; return removedItem; &#125; public java.util.Iterator&lt;AnyType&gt; iterator() &#123; return new ArrayListIterator&lt;AnyType&gt;(); &#125; private static class ArrayListIterator&lt;AnyType&gt; implements java.util.Iterator&lt;AnyType&gt; &#123; private int current = 0; public boolean hasNext() &#123; return current &lt; MyArrayList.this.size(); &#125; public AnyType next() &#123; return MyArrayList.this.theItems[current++]; &#125; public void remove() &#123; //防止迭代器的remove与MyArrayList的remove冲突 MyArrayList.this.remove(--current); &#125; &#125; &#125;; 简单的LinkedList类的实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176public class MyLinkedList &lt;AnyType&gt; implements Iterable&lt;AnyType&gt;&#123; private int theSize; //双向链表中的元素个数 private int modCount; //这个标记为了配合Iterator实现修改的保护，这一点后面专做论述,凡是做了增删修改，这个标记均变化 private Node&lt;AnyType&gt; beginMarker; // 双向链表的开始标记 private Node&lt;AnyType&gt; endMarker; //双向链表的尾部标记 public MyLinkedList() &#123; // 构造函数 先初始化双向聊表 调动 clear()函数 clear(); &#125; public void clear() &#123;// 确保双向链表处于空的状态 ----&gt; 我们使用一个辅助的头结点 // 头标记和尾标记 指向同一个 辅助头结点,和一个辅助的尾节点 beginMarker = new Node&lt;AnyType&gt;(null, null, null); endMarker = new Node&lt;AnyType&gt;(null, beginMarker, null); beginMarker.next = endMarker; theSize = 0; modCount ++; //zhege &#125; // 获取元素的个数 public int size() &#123; return theSize; &#125; // 判断是否为空 public boolean isEmpty() &#123; return theSize == 0; &#125; /* * 增删查改的操作 */ // 默认把元素插入到尾部,其中调用插入到指定位置的函数 public boolean add(AnyType x) &#123; add(size()+1, x); return true; &#125; // 把元素插入到指定位置，其中调用插入到指定元素之前 函数 public void add(int idx, AnyType x) &#123; addBefore(getNode(idx), x); &#125; // 重置某个节点的data值，并返回以前的 data值 public AnyType set(int idx, AnyType newVal) &#123; if(idx &lt;1 || idx &gt;size()) throw new RuntimeException(new Exception("下表越界")); Node&lt;AnyType&gt; p = getNode(idx); AnyType oldVal = p.data; p.data = newVal; return oldVal; &#125; // 删除第idx个节点,调用remove(Node)函数，返回删除节点的data值 public AnyType remove(int idx) &#123; if(idx &lt;1 || idx &gt;size()) throw new RuntimeException(new Exception("下表越界")); return remove(getNode(idx)); &#125; /* * 下面这些函数都是一些private的都是位别的一些函数服务的 */ // 在p前面插入 x 元素 private void addBefore(Node&lt;AnyType&gt;p, AnyType x) &#123; Node&lt;AnyType&gt; newNode = new Node&lt;AnyType&gt;(x, p.prev, p); newNode.prev.next = newNode; p.prev = newNode; theSize ++; //添加进来一个新元素之后，别忘了元素个数++ modCount ++; //无论增删 该标志 均++ &#125; // 获取 idx处的 节点引用 private Node&lt;AnyType&gt; getNode(int idx) &#123; if(idx &lt; 1 || idx &gt; size()+1)// 考虑在尾部插入的情况，如果取这个尾节点，其data = null throw new RuntimeException(new Exception("索引越界")); Node&lt;AnyType&gt; p = null; if( idx &lt;= size()/2) // 在前半边中找 &#123; p = beginMarker.next; for( int i = 1; i &lt; idx; i++) p = p.next; &#125;else&#123; //在后半边中找 p = endMarker; for(int i = size(); i &gt;= idx; i--) p = p.prev; &#125; return p; &#125; // 返回 删除某个节点，并返回这个节点的data值 private AnyType remove(Node&lt;AnyType&gt; p) &#123; p.prev.next = p.next; p.next.prev = p.prev; theSize --; modCount --; return p.data; &#125; /* * 实现迭代器 */ public Iterator&lt;AnyType&gt; iterator() &#123; return new LinkedListIterator(); &#125; //实现迭代器 private class LinkedListIterator implements Iterator&lt;AnyType&gt; &#123; private Node&lt;AnyType&gt; current = beginMarker.next; //记住当前的位置，这和书序表中类似 private int expectedModCount = modCount; private boolean okToRemove = false; @Override public boolean hasNext() &#123; // TODO Auto-generated method stub return current!=endMarker; &#125; @Override public AnyType next() &#123; // 注意了 下面的 保护迭代期间 不允许 越过迭代器修改集合元素的 机制 是精髓 if(modCount != expectedModCount) throw new RuntimeException(new Exception("您刚刚越过迭代器修改了集合元素")); if(!hasNext()) throw new RuntimeException(new Exception("已经没有元素了")); AnyType nextItem = current.data; current = current.next; okToRemove = true; return nextItem; &#125; @Override public void remove() &#123; // TODO Auto-generated method stub if(modCount != expectedModCount) throw new RuntimeException(new Exception("您刚刚越过迭代器修改了集合元素")); if(!okToRemove) throw new RuntimeException(new Exception("先next再删除")); MyLinkedList.this.remove(current.prev); okToRemove = false; // 与next()中的 okToRemove = false； 遥相呼应，以确保必须在next()之后才能remove expectedModCount ++; &#125; &#125; /* * 私有嵌套类的形式，定义内部节点，节点里面没有访问双向链表中的内容，所以使用私有嵌套类可也 * 如果访问了外面类的属性或者方法就只能使用内部类，去除static关键字,内部类的使用主要是为了可以简写，见单链表中的介绍 */ private static class Node&lt;AnyType&gt;&#123; // 构造函数 public Node(AnyType d, Node&lt;AnyType&gt;p, Node&lt;AnyType&gt;n) &#123; data = d; prev = p; next = n; &#125; public AnyType data; public Node&lt;AnyType&gt; prev; public Node&lt;AnyType&gt; next; &#125; &#125; 栈栈(stack)是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，叫做栈的顶端(top),对栈的操作有push(进栈)和pop(出栈)，前者相对于插入，后者相对于删除最后插入的元素。栈有时又叫做LIFO(后进先出)表。 栈的实现由于栈是一个表，任何实现表的方法都能实现栈，ArrayList和LinkedList都支持栈操作 栈的应用简单例子：平衡符号：编译器检查程序的语法错误叙述如下：做一个空栈，读入字符知道文件结尾，如果字符是个开放符号则将其推入栈中，如果是个封闭符号则当栈空时报错，否则将栈元素弹出，如果弹出的符号不是对应的开放符号则报错，在文件结尾如果栈非空则报错。 队列队列也是表，使用队列时，插入在一段，删除则在另一端。队列的基本操作是enqueue(入队)，它在表的末端插入元素，和dequeue(出队)，它删除并返回在表的开头的元素 队列的实现如果栈的情形一样，对于队列而言任何的表的实现都是合法的 队列的应用窗口买票的应用等所有需要先进先出的案例]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树]]></title>
    <url>%2F2017%2Ftree.html</url>
    <content type="text"><![CDATA[二叉树二叉树(binary tree)是一棵树，其中每个节点都不能有多余两个的子节点。二叉树的一个性质是一颗平均二叉树的深度要比节点个数N小得多，这个性质有时候很重要。实现因为一个二叉树节点最多有两个子节点，所以可以保存直接链接到它们的链。树节点的声明在结构上类似于双链表的声明，在声明中，节点就是有element的信息加上两个到其他节点的引用(left和right)组成的结构123456class BinaryNode&#123; Object element; BinaryNode left; BinaryNode right;&#125; 例子：表达式树表达式树的树叶是操作数，比如：常数或者变量名，而其他的节点为操作符。由于所有的操作都是二元的，因此这棵树正好是二叉树。如下图： 查找树ADT——二叉查找树二叉树的一个重要应用就是它们在查找中的使用。使二叉树成为查找树的性质是，对于树中的每个节点X，它的左子树中所有想的值小于X中的项，而它右子树中所有项的值大于X中的项。如下图(假设节点元素都是整数)：二叉树查找树要求所有的项都能够排序，需要写出一个interface来标识这个性质，这个接口就是Comparable。该接口告诉我们树种的两项总可以使用compareTo方法进行比较。由此可以确定所有其他可能的关系，特别是不适用equals方法，而是根据两项相等当且仅当compareTo方法返回0来判断相等。 contains方法如果在树T中存在还有项X的节点，那么这个操作需要返回true，如果这样的节点不存在则返回false。 findMin方法和findMax方法这两个private分别返回树中包含最小和最大元素的节点的引用。执行findMin从根开始并且只要有左节点就向左进行，终点就是最小的元素，findMax向右同理。 insert方法为了将X插入到树T中，可以像用contains那样沿着树查找。如果找到X则什么也不做(或者做一些“更新”)，否则将X插入到遍历的路劲上的最后一点上。重复元素的插入可以通过在节点记录中保留一个附加域以指示发生的频率来处理。这对整个树增加了某些附加空间，但是却比将重复信息放到树中要好（它将使树的深度变得很大） remove方法如果节点是一片树叶则立即删除。如果节点有一个子节点，则该节点可以在其父节点调整自己的链以绕过该节点后被删除。如果该节点有两个子节点，一般的删除策略是用其右子树的最小数据代替该节点的数据并递归地删除那个节点(现在它是空的)，因为右子树中的最小的节点不可能有左节点，所以第二次remove要容易。如果删除的次数不多，通常使用的策略是懒惰删除，当一个元素要被删除时，它仍被保留在树中，而是被标记为删除，这在有重复项时很常用，因为此时记录出现频率数的域可以减1. AVL树AVL树是带有平衡条件的二叉查找树。这个平衡条件必须要容易保持，而且它保证树的深度需是O(log N)。最简单的想法是要求左右子树具有相同的高度。另一种平衡条件是要求每个节点都必须有相同高度的左子树和右子树。 单旋转 双旋转 树的遍历遍历的一般方法是首先处理左子树，然后是当前节点，最后是右子树。这个算法的有趣部分除它简单的特性外，还在于其总的运行时间是O(N)。 标准库中的集合与映射List容器即ArrayList和Linkedlist用于查找效率很低。因此,Collections API提供了两个附加容器Set和Map，它们对诸如插入、删除、和查找等基本操作提供有效的实现。 关于Set接口Set接口代表不允许重复元素的Collection。由接口SortedSet给出的一种特殊类型的Set保证其中的各项处于有序的状态。 关于Map接口Map是一个接口，代表由关键字以及它们的值组成的一些项的集合。关键字必须是唯一的，但是若干关键字可以映射到一些相同的值。在SortMap接口中，映射中的关键字保持逻辑上有序的状态。通过一个Map进行迭代要比Colection复杂，因为Map不提供迭代器而是提供3种方法讲Map对象的视图最为Collection对象返回。由于这些视图本身就是Collection，因此它们可以被迭代。如下：123Set&lt;KeyType&gt; keySet()Collection&lt;ValueType&gt; values()Set&lt;Map.Entry&lt;keyType.ValueType&gt;&gt; entrySet() TreeSet类和TreeMap类的实现Java要求TreeSet和TreeMap支持基本的add、remove和contains操作以对数最坏情形时间完成，因此基本的实现方法就是平衡二叉查找树。一般并不适用AVL树，而是使用一些自顶向下的红黑树。 小结表达式树是更一般结构即所谓分析树的一个小例子，分析树是编译器设计中的核心数据结构。分析树不是二叉树，而是表达式树相对简单的扩充。查找树在算法实际中是非常重要的，几乎支持所有有用的操作，而其对数平均开销很小。查找树的问题在于其性能严重依赖输入，而输入是随机的。处理这个问题的几种平衡树方案：AVL数、伸展树、B树等。在实践中，所有平衡树方案的运行时间对于插入和删除操作(除查找稍微快一些)都不如简单二叉树省时，但一般来说是可以接受的，它防止轻易得到最坏情形的输入。通过将一些元素插入到查找树然后执行一次中序遍历，我们得到的是拍过顺序的元素。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
