<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iwyy&#39;s Blog</title>
  
  <subtitle>Life is so beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iwyy.top/"/>
  <updated>2018-01-20T08:47:40.670Z</updated>
  <id>http://www.iwyy.top/</id>
  
  <author>
    <name>iwyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql高性能索引</title>
    <link href="http://www.iwyy.top/2018/mysql-index.html"/>
    <id>http://www.iwyy.top/2018/mysql-index.html</id>
    <published>2018-01-19T13:52:51.000Z</published>
    <updated>2018-01-20T08:47:40.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h1><p>索引由很多类型，可以为不同场景提供更好的性能，在mysql中索引是存储引擎层而不是服务器层实现的。不同存储引擎的索引工作方式也不一样，也不是所有存储引擎支持所有索引类型，其底层实现也可能不同。</p><h2 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h2><p>使用B-Tree数据结构来存储数据，大多数mysql引擎都支持这种索引，Archive引擎是个例外。<br>存储引擎以不同的方式使用B-Tree索引，性能也各不同，各有优劣。<br>例如，MyISAM使用前缀压缩使得索引更小，但InnoDB按照原数据格式进行存储。再如MyISAM索引通过数据的屋里位置引用被索引的行，而InnoDB根据主键引用被索引的行。<br>B-Tree索引对如下类型的查询有效（假设：key(name,dob)）：<br>1、全值匹配<br>比如查找姓名为Allen的人，出生于1996年的人<br>2、匹配最左前缀<br>比如查找姓名为Allen的人，即只是用索引的第一列<br>3、匹配列前缀<br>比如查找所有以J开头的姓的人。这里也只使用了索引的第一列。<br>4、匹配范围值<br>比如查找姓在Allen和Barrymore之间的人。这里也只使用了索引的第一列。<br>5、匹配某一列并范围匹配另一列<br>比如查找姓名Allen的人，出生1996到2005的人<br>B-Tree支持“值访问索引的查询”，即查询只需要访问索引，而不需要访问数据行，也叫做“覆盖索引”。<br>因为索引树中的节点是有序的，所以除了按值查找之外，索引还可以用order by操作。<br><a id="more"></a></p><h2 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h2><p>哈希索引基于哈希表实现，只有精确匹配索引所有的列的查询才有效。<br>mysql中只有Memory引擎显式的支持哈希索引，也是Memory的默认索引类型,Memory引擎同时也支持B-Tree索引。Memory引擎是支持费唯一哈希索引的，如果多个列的哈希值相同，索引会以链表的方式存放记录指针到同一个哈希条目中。<br>哈希索引查询的速度非常快，但是哈希索引也有很多限制：<br>1、哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。<br>2、哈希索引数据不是按照索引值顺序存储的，所以也无法用于排序<br>3、哈希索引不支持部分索引列的匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。<br>4、哈希索引只支持等值比较查询,包括=、IN()、&lt;=&gt;，不支持范围查询。<br>5、哈希索引的数据非常快，除非有很多哈希冲突，如果冲突很多的时候索引维护操作的代价也高，查找遍历链表代价也大。<br>因为这些限制，哈希索引只适用于某些特定的场合，而一旦适合则带来的性能提升非常显著。<br>InnoDB引擎有个特殊的功能叫做“自适应哈希索引”。当InnoDB注意到某些索引值被使用的非常频繁时，它会在内存中基于B-tree索引之上再创建一个哈希索引，这样就让B-Tree也有哈希索引的一些优点，比如快速的哈希查找，这是个完全自动的内部行为用户无法控制，但可以关闭该功能。<br>如果存储引擎不支持哈希索引，可以模拟想InnoDB一样创建哈希索引，这样可以享受一些哈希索引的遍历，比如只需要很小的索引就可以为超长的键创建索引，思路很简单：在B-Tree基础上创建一个伪哈希索引。<br>例如：<br>select id from url where url=”<a href="http://www.mysql.com" target="_blank" rel="noopener">http://www.mysql.com</a>“;<br>删除原来url列上的所以，新增一个url_rcc列，使用crc32做哈希，使用下面的方式查询：<br>select id from url where url = “<a href="http://www.mysql.com" target="_blank" rel="noopener">http://www.mysql.com</a>“<br>and url_rcc = crc32(“<a href="http://www.mysql.com" target="_blank" rel="noopener">http://www.mysql.com</a>“);<br>这样做新能会非常高，因为mysql优化器会使用这个选择性很高而体积很小的基于url_crc列的索引来完成查找。这样做需要维护哈希值可以使用触发器或者手动。如果这种方式不要使用sha1()和md5()作为哈希函数，因为这两个函数计算出来的哈希值非常长。</p><h2 id="空间数据索引（R-Tree）"><a href="#空间数据索引（R-Tree）" class="headerlink" title="空间数据索引（R-Tree）"></a>空间数据索引（R-Tree）</h2><p>MyISAM表支持空间所以呢，可以用作地理数据存储。</p><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>它是查找文本中的关键词，而不是直接比较索引中的值。</p><h1 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h1><p>1、大大减少了服务器需要扫描的数据量。<br>2、可以帮助服务器避免排序和临时表。<br>3、可以随机I/O变为顺序I/O。</p><h1 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h1><h2 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h2><p>“独立的列”是指索引列不能使表达式的一部分也不能是函数的参数<br>例如：select id from aa where id+1=5;<br>正确写法：select id from aa where id=4;</p><h2 id="前缀索引和索引的选择性"><a href="#前缀索引和索引的选择性" class="headerlink" title="前缀索引和索引的选择性"></a>前缀索引和索引的选择性</h2><p>有时候需要索引很长的字符列，这会让索引变得大且慢。一个策略是上面提到的通过模拟哈希索引，另一种就是前缀索引。<br>通常可以索引开始的部分字符，这样可以一打打节约索引空间，提高效率。但这样会降低索引的选择性。索引的选择性是指不重复的索引值和数据表的记录总数的比值，范围。索引的选择性越高则查询效率越高，因为可以过滤掉更多的行。唯一索引的选择性是1，性能是最好的。<br>创建前缀索引：alter table aa add key(name(7))<br>mysql前缀索引无法做order by 和group by，也无法使用前缀索引做覆盖扫描。</p><h2 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h2><p>给多个列创建独立的单例索引，多列索引大部分情况下并不能提高mysql的查询性能，mysql5.0之后更是引入一种叫索引合并的策略，一定程度上可以使用表上的多个单列索引来定位指定的行。索引合并策略是一种优化的结果，但实际上更多的说明了表上的索引建的非常糟糕：<br>1、当出现服务器对多个索引做相交操作（通常有多个and条件），通常以位置需要一个包含所有相关列的多列索引，而不是多个多里的单列索引。<br>2、当服务器需要对多个索引做联合操作时（通常是多个or条件）。</p><h2 id="选择合适的索引列顺序"><a href="#选择合适的索引列顺序" class="headerlink" title="选择合适的索引列顺序"></a>选择合适的索引列顺序</h2><p>讲选择性最高的列放到索引最前列。</p><h2 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h2><p>聚簇索引并不是一个单独的索引类型，而是一种数据存储方式。<br>B+Tree结构都可以用在MyISAM和InnoDB上。mysql中，不同的存储引擎对索引的实现方式不同。<br>B+Tree示意图<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mysql-index1.png"><br>聚集索引和非聚集索引原理图<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mysql-index2.png"></p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>聚簇索引的数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的。聚簇索引要比非聚簇索引查询效率高很多。<br>聚集索引这种主+辅索引的好处是，当发生数据行移动或者页分裂时，辅助索引树不需要更新，因为辅助索引树存储的是主索引的主键关键字，而不是数据具体的物理地址。<br>InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上，若使用”where id = 14”这样的条件查找主键，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。若对Name列进行条件搜索，则需要两个步骤：第一步在辅助索引B+树中检索Name，到达其叶子节点获取对应的主键。第二步使用主键在主索引B+树种再执行一次B+树检索操作，最终到达叶子节点即可获取整行数据。</p><h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>非聚集索引，类似于图书的附录，那个专业术语出现在哪个章节，这些专业术语是有顺序的，但是出现的位置是没有顺序的。每个表只能有一个聚簇索引，因为一个表中的记录只能以一种物理顺序存放。但是，一个表可以有不止一个非聚簇索引。<br>MyISAM的是非聚簇索引，B+Tree的叶子节点上的data，并不是数据本身，而是数据存放的地址。主索引和辅助索引没啥区别，只是主索引中的key一定得是唯一的。这里的索引都是非聚簇索引。非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，<br>这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>覆盖索引又可以称为索引覆盖。<br>解释一： 就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。<br>解释二： 索引是高效找到行的一个方法，当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引。<br>解释三：是非聚集组合索引的一种形式，它包括在查询里的Select、Join和Where子句用到的所有列（即建立索引的字段正好是覆盖查询语句[select子句]与查询条件[Where子句]中所涉及的字段，也即，索引包含了查询正在查找的所有数据）<br>不是所有类型的索引都可以成为覆盖索引，覆盖索引必须要存储索引列的值，而哈希索引、空间索引、全文索引都不存储列的值，所以mysql只能用B-Tree索引做覆盖索引。不同的存储引擎实现覆盖索引的方式也不同，而且也不是所有的存储引擎都支持覆盖索引（memory存储引擎就不支持覆盖索引，不排除未来支持）</p><h3 id="覆盖索引的好处"><a href="#覆盖索引的好处" class="headerlink" title="覆盖索引的好处"></a>覆盖索引的好处</h3><p>1、索引条目通常远小于数据行大小，减少数据访问和I/O开销。<br>2、由于InnoDB聚簇索引，覆盖索引对InnoDb表特别有用，InnoDb的二级索引在叶子节点中保存了行的主键值，如果二级主键可以覆盖查询，可以避免对主键索引的二次查询。</p><h2 id="使用索引描述来排序"><a href="#使用索引描述来排序" class="headerlink" title="使用索引描述来排序"></a>使用索引描述来排序</h2><p>mysql使用两种方式可以生成有序的结果：通过排序操作或者按索引顺序扫描。如果explain出来的type列值为“index”，则说明mysql使用了索引扫描来做排序。<br>mysql可以使用同一个索引既满足排序有用于查找，如果可能，设计索引时应该尽可能地同时满足这两种任务。<br>只有当索引的列顺序和order by 子句的顺序完全一致，并且所有列的排序方向（要么都是desc，要么都是asc）都一样时，mysql才能使用索引来对结果做排序。如果查询多张关联表，则只有当order by 子句引用的字段全部为第一个表时，才能使用做排序。<br>有一种情况下order by子句可以不满足索引的最左前缀的要求，就是前导列为常量的时候。如果where子句或者join子句中这些列制定了常量就可以弥补索引的不足。<br>表指定索引 key（a,b,c）例子：<br>where a=1 order by b,c;<br>where a=1 order by b;<br>where a&gt;1 order by a,b;<br>一下是错误的例子：<br>where a =1 order by b desc,c asc;<br>where a =1 order by c;<br>where a&gt;1 order by b,c;<br>where a =1 and b in(1,2) order by c;</p><h2 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h2><p>mysql允许在相同的列上创建多个索引。mysql需要单独维护重复的索引，这会影响性能。应该避免创建重复索引，发现以后应该立即移除。<br>下面的代码创建了三个重复的索引：<br>create table text(id int not null PRIMARY KEY,<br>UNIQUE(ID),INDEX(ID)<br>)ENGIN=InnoDB;<br>冗余索引和重复索引有些不同，如果创建了索引(A,B),在创建索引(A)就是冗余索引，因为这只是前一个索引的前缀索引。如果在创建(B,A),则不是冗余索引，(B)也不是。冗余索引通常只是对B-tree索引来说的。<br>大多数情况不需要冗余索引，但也有出于性能考虑需要冗余索引，因为扩展已有的索引会导致变得太大，从而影响其他使用该索引的查询的性能。<br>表中的索引越多插入速度回越慢，一般来说，增加新索引将会导致insert、update、delete等操作的速度变慢，特别是新增索引达到了内存瓶颈的时候。</p><h2 id="未使用的索引"><a href="#未使用的索引" class="headerlink" title="未使用的索引"></a>未使用的索引</h2><p>有些服务器永远用不到的索引。建议考虑删除。<br>怎样检测未使用的索引请google或者百度。</p><h2 id="索引和锁"><a href="#索引和锁" class="headerlink" title="索引和锁"></a>索引和锁</h2><p>索引可以让查询锁定更少的行。<br>InnoDB只有在访问行的时候才会对其加锁，而索引能减少InnoDB访问的行数，从而减少锁的数量。</p><h1 id="MySQL索引失效的几种情况"><a href="#MySQL索引失效的几种情况" class="headerlink" title="MySQL索引失效的几种情况"></a>MySQL索引失效的几种情况</h1><h2 id="索引不存储null值"><a href="#索引不存储null值" class="headerlink" title="索引不存储null值"></a>索引不存储null值</h2><p>更准确的说，单列索引不存储null值，复合索引不存储全为null的值。索引不能存储Null，所以对这列采用is null条件时，因为索引上根本<br>没Null值，不能利用到索引，只能全表扫描。<br>为什么索引列不能存Null值？<br>将索引列值进行建树，其中必然涉及到诸多的比较操作。Null值的特殊性就在于参与的运算大多取值为null。<br>这样的话，null值实际上是不能参与进建索引的过程。也就是说，null值不会像其他取值一样出现在索引树的叶子节点上。</p><h2 id="不适合键值较少的列（重复数据较多的列）"><a href="#不适合键值较少的列（重复数据较多的列）" class="headerlink" title="不适合键值较少的列（重复数据较多的列）"></a>不适合键值较少的列（重复数据较多的列）</h2><p>如果某个数据列里包含着许多重复的值，就算为它建立了索引也不会有很好的效果。比如说，如果某个数据列里包含了净是些诸如“0/1”或“Y/N”等值，就没有必要为它创建一个索引。</p><h2 id="前导模糊查询不能利用索引-like-‘-XX’或者like-‘-XX-’"><a href="#前导模糊查询不能利用索引-like-‘-XX’或者like-‘-XX-’" class="headerlink" title="前导模糊查询不能利用索引(like ‘%XX’或者like ‘%XX%’)"></a>前导模糊查询不能利用索引(like ‘%XX’或者like ‘%XX%’)</h2><p>假如有这样一列code的值为’AAA’,’AAB’,’BAA’,’BAB’ ,如果where code like ‘%AB’条件，由于前面是模糊的，所以不能利用索引的顺序，必须一个个去找，看是否满足条件。这样会导致全索引扫描或者全表扫描。如果是这样的条件where code like ‘A % ‘，就可以查找CODE中A开头的CODE的位置，当碰到B开头的数据时，就可以停止查找了，因为后面的数据一定不满足要求。这样就可以利用索引了。</p><h2 id="in-失效的情况"><a href="#in-失效的情况" class="headerlink" title="in 失效的情况"></a>in 失效的情况</h2><p>eq_range_index_dive_limit这个参数影响in是否使用索引， 5.6 默认值是10 5.7 默认值是 200</p><h2 id="mysql自动优化"><a href="#mysql自动优化" class="headerlink" title="mysql自动优化"></a>mysql自动优化</h2><p>如果mysql估计使用全表扫描要比使用索引快,则不使用索引。如果需要使用索引可以强制使用索引。<br>mysql强制使用索引:force index(索引名或者主键PRI)<br>例如:<br>select <em>from table force index(PRI) limit 2;(强制使用主键)<br>select </em>from table force index(ziduan1_index) limit 2;(强制使用索引”ziduan1_index”)<br>select <em>from table force index(PRI,ziduan1_index) limit 2;(强制使用索引”PRI和ziduan1_index”)<br>mysql禁止某个索引：ignore index(索引名或者主键PRI)<br>例如:<br>select </em>from table ignore index(PRI) limit 2;(禁止使用主键)<br>select <em>from table ignore index(ziduan1_index) limit 2;(禁止使用索引”ziduan1_index”)<br>select </em>from table ignore index(PRI,ziduan1_index) limit 2;(禁止使用索引”PRI,ziduan1_index”)</p><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>索引字段类型使用<br>explain extended select uid from user where mo = 123445 limit 0,1<br>原因：索引隐式转换,mo是varchar类型,这里使用的是数字,索引使用无效（数据类型以及字符集定义不当导致）<br>在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了索引也不会使用</p><h2 id="索引列不能参与计算"><a href="#索引列不能参与计算" class="headerlink" title="索引列不能参与计算"></a>索引列不能参与计算</h2><p>保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><h1 id="Explain优化查询检测"><a href="#Explain优化查询检测" class="headerlink" title="Explain优化查询检测"></a>Explain优化查询检测</h1><h2 id="禁止缓存"><a href="#禁止缓存" class="headerlink" title="禁止缓存"></a>禁止缓存</h2><p>在测试sql语句性能时有时需要禁用缓存， 下面是几种不同的实现方式， 供参考使用：</p><ol><li>通过sql的select语句中添加SQL_NO_CACHE修饰来禁用查询缓存<br>SELECT SQL_NO_CACHE * FROM TABLE_NAME</li><li>通过set 变量来实现禁用缓存<br>SET SESSION query_cache_type=0;</li><li>通过reset指令来重置缓存<br>RESET QUERY CACHE<br>以上三种方法都可以达到测试mysql性能时清缓存的目的。<h2 id="MySQL执行计划调用方式"><a href="#MySQL执行计划调用方式" class="headerlink" title="MySQL执行计划调用方式"></a>MySQL执行计划调用方式</h2>1.EXPLAIN SELECT ……<br>变体：<br>2.EXPLAIN EXTENDED SELECT ……<br>将执行计划”反编译”成SELECT语句，运行SHOW WARNINGS<br>可得到被MySQL优化器优化后的查询语句<br>3.EXPLAIN PARTITIONS SELECT ……<br>用于分区表的EXPLAIN生成QEP的信息<h2 id="关于explain选项"><a href="#关于explain选项" class="headerlink" title="关于explain选项"></a>关于explain选项</h2>下面是一个实例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select products_id from products limit 1;</span><br><span class="line">+----+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table  | type | possible_keys | key   | key_len | ref | rows | Extra    |</span><br><span class="line">+----+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| 1 | SIMPLE   | products | index | NULL     | PRIMARY | 4    | NULL | 3113 | Using index |</span><br><span class="line">+----+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br></pre></td></tr></table></figure></li></ol><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>MySQL  Query  Optimizer选定的执行计划中查询的序列号。<br>表示查询中执行select子句或操作表的顺序，id值越大优先级越高，越先被执行。id相同，执行顺序由上至下</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>1、SIMPLE：简单的select查询，不使用union及子查询<br>2、PRIMARY：最外层的select查询<br>3、UNION：UNION中的第二个或随后的select查询，不依赖于外部查询的结果集<br>4、DEPENDENT UNION：UNION中的第二个或随后的select查询，依赖于外部查询的结果集<br>5、UNION RESULT： UNION查询的结果集SUBQUERY子查询中的第一个select查询，不依赖于外部查询的结果集<br>6、DEPENDENT SUBQUERY:子查询中的第一个select查询，依赖于外部查询的结果集DERIVED用于from子句里有子查询的情况。<br>    MySQL会递归执行这些子查询，把结果放在临时表里。<br>7、UNCACHEABLE SUBQUERY:结果集不能被缓存的子查询，必须重新为外层查询的每一行进行评估<br>8、UNCACHEABLE UNION:UNION中的第二个或随后的select查询，属于不可缓存的子查询</p><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>1、system：表仅有一行(系统表)。这是const连接类型的一个特例。<br>2、const：const用于用常数值比较PRIMARY KEY时。当查询的表仅有一行时，使用system。<br>3、eq_ref：除const类型外最好的可能实现的连接类型。它用在一个索引的所有部分被连接使用并且索引是UNIQUE或PRIMARY KEY，<br>    对于每个索引键，表中只有一条记录与之匹配。<br>4、ref：连接不能基于关键字选择单个行，可能查找到多个符合条件的行。叫做ref是因为索引要跟某个参考值相比较。<br>    这个参考值或者是一个常数，或者是来自一个表里的多表查询的结果值。<br>5、ref_or_null：如同ref，但是MySQL必须在初次查找的结果里找出null条目，然后进行二次查找。<br>6、index_merge：说明索引合并优化被使用了。<br>7、unique_subquery：在某些IN查询中使用此种类型，而不是常规的ref：<br>    value IN (SELECT primary_key FROM single_table WHERE some_expr)<br>    index_subquery在某些IN查询中使用此种类型，与unique_subquery类似，但是查询的是非唯一性索引：<br>    value IN (SELECT key_column FROM single_table WHERE some_expr)<br>8、range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。<br>    当使用=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range。<br>9、index：全表扫描，只是扫描表的时候按照索引次序进行而不是行。主要优点就是避免了排序，但是开销仍然非常大。<br>10、all：最坏的情况，从头到尾全表扫描</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>表示MySQL在表中找到所需行的方式，又称“访问类型”，常见类型如下:<br> ALL, index,  range, ref, eq_ref, const, system, NULL<br>从左到右，性能从最差到最好<br>a. ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行<br>b. index：Full Index Scan，index与ALL区别为index类型只遍历索引树<br>c. range:索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行。显而易见的索引范围扫描是带有between或者where子句里带有&lt;, &gt;查询。当mysql使用索引去查找一系列值时，例如IN()和OR列表，也会显示range（范围扫描）,当然性能上面是有差异的。<br>d. ref：使用非唯一索引扫描或者唯一索引的前缀扫描，返回匹配某个单独值的记录行<br>e. eq_ref：类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件<br>f. const、system：当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量<br>g. NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用,如果为空，说明没有可用的索引</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL<br>mysql实际从possible_key选择使用的索引。如果为null，则没有使用索引。很少的情况下，mysql会选择优化不足的索引。这种情况下，可以在select语句中使用use  index（indexname）来强制使用一个索引或者用ignore  index（indexname）来强制mysql忽略索引</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）<br>在不损失精确性的情况下，长度越短越好</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><p>1、Distinct<br>一旦mysql找到了与行相联合匹配的行，就不再搜索了。<br>2、Not exists<br>mysql 优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。<br>3、Range checked for each<br>Record（index map:#）没有找到理想的索引，因此对于从前面表中来的每一个行组合，mysql检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一。<br>4、Using filesort<br>表示MySQL会对结果使用一个外部索引排序，而不是从表里按索引次序读到相关内容。可能在内存或者磁盘上进行排序。MySQL中无法利用索引完成的排序操作称为“文件排序”。<br>5、Using index<br>该值表示相应的select操作中使用了覆盖索引（Covering Index）,列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候。<br>6、Using temporary<br>mysql需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。<br>表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询<br>这个值表示使用了内部临时(基于内存的)表。一个查询可能用到多个临时表。有很多原因都会导致MySQL在执行查询期间创建临时表。两个常见的原因是在来自不同表的上使用了DISTINCT,或者使用了不同的ORDER BY和GROUP BY列。可以强制指定一个临时表使用基于磁盘的MyISAM存储引擎。这样做的原因主要有两个：<br>1)内部临时表占用的空间超过min(tmp_table_size，max_heap_table_size)系统变量的限制<br>2)使用了TEXT/BLOB 列<br>7、Using where<br>使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题。。许多where条件里涉及索引中的列，当（并且如果）它读取索引时，就能被存储引擎检验，因此不是所有带where字句的查询都会显示”Using where”。有时”Using where”的出现就是一个暗示：查询可受益与不同的索引。<br>8、Using join buffer<br>改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。<br>9、Impossible where<br>这个值强调了where语句会导致没有符合条件的行。<br>10、 Select tables optimized away<br>这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行.<br>11、Index merges<br>当MySQL 决定要在一个给定的表上使用超过一个索引的时候，就会出现以下格式中的一个，详细说明使用的索引以及合并的类型。<br>Using sort_union(…)<br>Using union(…)<br>Using intersect(…)</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况<br>• EXPLAIN不考虑各种Cache<br>• EXPLAIN不能显示MySQL在执行查询时所作的优化工作<br>• 部分统计信息是估算的，并非精确值<br>• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。<br>参考<br>（1）《高性能MySQL》<br>（2）《数据结构与算法分析》</p><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      #索引类型索引类型
索引由很多类型，可以为不同场景提供更好的性能，在mysql中索引是存储引擎层而不是服务器层实现的。不同存储引擎的索引工作方式也不一样，也不是所有存储引擎支持所有索引类型，其底层实现也可能不同。

#B-TREE索引B-TREE索引
使用B-Tree数据结构来存储数据，大多数mysql引擎都支持这种索引，Archive引擎是个例外。
存储引擎以不同的方式使用B-Tree索引，性能也各不同，各有优劣。
例如，MyISAM使用前缀压缩使得索引更小，但InnoDB按照原数据格式进行存储。再如MyISAM索引通过数据的屋里位置引用被索引的行，而InnoDB根据主键引用被索引的行。
B-Tree索引对如下类型的查询有效（假设：key(name,dob)）：
1、全值匹配
比如查找姓名为Allen的人，出生于1996年的人
2、匹配最左前缀
比如查找姓名为Allen的人，即只是用索引的第一列
3、匹配列前缀
比如查找所有以J开头的姓的人。这里也只使用了索引的第一列。
4、匹配范围值
比如查找姓在Allen和Barrymore之间的人。这里也只使用了索引的第一列。
5、匹配某一列并范围匹配另一列
比如查找姓名Allen的人，出生1996到2005的人
B-Tree支持“值访问索引的查询”，即查询只需要访问索引，而不需要访问数据行，也叫做“覆盖索引”。
因为索引树中的节点是有序的，所以除了按值查找之外，索引还可以用order by操作。
    
    </summary>
    
      <category term="sql" scheme="http://www.iwyy.top/categories/sql/"/>
    
    
      <category term="mysql" scheme="http://www.iwyy.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用经典案例</title>
    <link href="http://www.iwyy.top/2018/mysql-classic-case.html"/>
    <id>http://www.iwyy.top/2018/mysql-classic-case.html</id>
    <published>2018-01-18T12:32:36.000Z</published>
    <updated>2018-01-18T14:01:15.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引最佳实践"><a href="#索引最佳实践" class="headerlink" title="索引最佳实践"></a>索引最佳实践</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc1.jpg"><h2 id="无索引案例（添加索引没生效）"><a href="#无索引案例（添加索引没生效）" class="headerlink" title="无索引案例（添加索引没生效）"></a>无索引案例（添加索引没生效）</h2><p>索引字段类型使用<br>explain extended select uid from user where mo = 123445 limit 0,1<br>原因：索引隐式转换,mo是varchar类型,这里使用的是数字,索引使用无效（数据类型以及字符集定义不当导致）<br><a id="more"></a></p><h1 id="分页优化案例"><a href="#分页优化案例" class="headerlink" title="分页优化案例"></a>分页优化案例</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc2.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc3.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc4.jpg"><h1 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc5.jpg"><h2 id="ddl操作需要注意慢查询"><a href="#ddl操作需要注意慢查询" class="headerlink" title="ddl操作需要注意慢查询"></a>ddl操作需要注意慢查询</h2><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc6.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc7.jpg"><h1 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc8.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc9.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc10.jpg"><h1 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc11.jpg"><h1 id="cpu-100"><a href="#cpu-100" class="headerlink" title="cpu 100%"></a>cpu 100%</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc12.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc13.jpg"><h1 id="conn-100"><a href="#conn-100" class="headerlink" title="conn 100%"></a>conn 100%</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc14.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc15.jpg"><h1 id="iops-100"><a href="#iops-100" class="headerlink" title="iops 100%"></a>iops 100%</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc16.jpg"><h1 id="disk-100"><a href="#disk-100" class="headerlink" title="disk 100%"></a>disk 100%</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc17.jpg"><h1 id="mem-100"><a href="#mem-100" class="headerlink" title="mem 100%"></a>mem 100%</h1><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc18.jpg"> <img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/mcc19.jpg"><p>参考视频：<a href="https://yq.aliyun.com/webinar/play/240" target="_blank" rel="noopener">云数据库使用十大经典案例</a></p><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      #索引最佳实践索引最佳实践
[/uploads/image/mcc1.jpg]#无索引案例（添加索引没生效）无索引案例（添加索引没生效）
索引字段类型使用
explain extended select uid from user where mo = 123445 limit 0,1
原因：索引隐式转换,mo是varchar类型,这里使用的是数字,索引使用无效（数据类型以及字符集定义不当导致）
    
    </summary>
    
      <category term="sql" scheme="http://www.iwyy.top/categories/sql/"/>
    
    
      <category term="mysql" scheme="http://www.iwyy.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>剧场版《Fate/stay night [Heaven&#39;s Feel] I.presage flower》主题曲</title>
    <link href="http://www.iwyy.top/2018/fate.html"/>
    <id>http://www.iwyy.top/2018/fate.html</id>
    <published>2018-01-12T11:33:00.000Z</published>
    <updated>2018-01-13T13:10:22.744Z</updated>
    
    <content type="html"><![CDATA[<img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/fate-1.jpg"><a id="more"></a><iframe src="//music.163.com/outchain/player?type=2&id=514543467&auto=0&height=66" width="330" height="86" frameborder="0" allowfullscreen></iframe><blockquote class="blockquote-center"><p>作曲 : 梶浦由記<br>作词 : 梶浦由記</p><p>その日々は夢のように<br>那些如梦似幻的日子已然逝去</p><p>臆病な微笑みと<br>徒然留下的是<br>やさしい爪を<br>怯懦的笑容</p><p>残して行った<br>还有温柔的指尖<br>退屈な花びらのように<br>宛如毫无生趣的花瓣</p><p>くるしみを忘れて<br>将痛苦忘却<br>貴方の背中でそっと<br>在你的背后悄然</p><p>泣いて笑った<br>流着泪笑了</p><p>帰らぬ日々を思うような<br>似是怀念不再归来的往日一般<br>奇妙な愛しさに満ちた<br>于满盈着奇妙爱怜的</p><p>箱庭の中で<br>庭园盆景之中</p><p>息をひそめ<br>敛藏气息</p><p>季節が行くことを忘れ<br>季节忘记流转<br>静かな水底のような<br>置身于寂静水底般的<br>時間にいた<br>时光之中</p><p>冷たい花びら<br>冰冷的花瓣<br>夜に散り咲く<br>在夜晚绽放纷飞<br>まるで白い雪のようだね<br>好似白雪一般呢<br>切なく<br>那些揪心地<br>貴方の上に降った<br>飘落你身的<br>かなしみを全て<br>所有悲伤<br>払いのけてあげたいだけ<br>我不过是想为你将其尽数拂去</p><p>貴方のこと傷つけるもの全て<br>伤害你的一切事物<br>私はきっと許すことは出来ない<br>我绝对无法宽恕<br>優しい日々<br>那些安详的日子<br>涙が出るほど<br>我想回到那时<br>帰りたい<br>到了泪水夺眶而出的程度<br>貴方と二人で<br>与你一同<br>見上げた<br>仰望过的花瓣<br>花びらが散った<br>已凋零飞散</p><p>月が雲に隠れて<br>月亮隐匿于云层之中</p><p>貴方は道を失くして<br>令你迷失道路<br>泣き出しそうな<br>你的双眼</p><p>目をしてた<br>泫然欲泣<br>ぎざぎざなこころだって<br>纵然是你我两人那残破如锯齿的心</p><p>ふたつ合わせてみれば<br>若能得以结合<br>優しいものがきっと<br>一定能够孕育出</p><p>生まれてくるわ<br>纯真美好之物啊</p><p>私を傷つけるものを<br>伤害我的事物<br>貴方は許さないでくれた<br>你未曾给予宽恕</p><p>それだけでいいの<br>仅是如此我已满足</p><p>戯れに伸ばされた<br>嬉闹中你向我伸出的手<br>貴方の手にしがみ付いた<br>我将其紧紧握住<br>諦めていた世界に<br>为已然断念的世界<br>やがて温かな灯がともる<br>须臾间点亮温暖的灯火</p><p>冷たい花びら<br>冰冷的花瓣<br>夜を切り裂く<br>劈裂长夜<br>私が摘んだ光をみんな束ねて<br>我将采撷的所有光芒包捆成束<br>貴方の上に全部<br>只是想要由你之上<br>よろこびのように<br>宛如庆贺地<br>撒き散らしてあげたいだけ<br>将光芒尽数为你挥洒</p><p>わるいことをしたらきっと貴方が<br>如若我犯下歹行 你一定会对我发怒<br>怒ってくれると約束したよね<br>我们有过这样的约定对吧<br>だからきっともう一度<br>因而你一定能再度<br>私を見つけてくれるよね<br>找寻到我的对吧<br>寂しいところに<br>我已经不必置身于<br>もういなくていいね<br>那孤独寂寥之地了对吧<br>一人で<br>我孤身一人<br>見上げた<br>仰望过的花瓣<br>花びらが散った<br>已凋零飞散</p></blockquote><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      [/uploads/image/fate-1.jpg]
    
    </summary>
    
      <category term="音乐" scheme="http://www.iwyy.top/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="动漫" scheme="http://www.iwyy.top/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>优先队列(堆)</title>
    <link href="http://www.iwyy.top/2017/priority-queue.html"/>
    <id>http://www.iwyy.top/2017/priority-queue.html</id>
    <published>2017-12-23T11:33:00.000Z</published>
    <updated>2018-01-10T15:00:45.411Z</updated>
    
    <content type="html"><![CDATA[<p>优先队列(priority queue)<br>普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>优先队列允许至少两种操作的数据结构：insert和deleteMin（删除最小者），它是找出、返回并删除优先队列中最小的元素。<br>insert等价于入队，deleteMin等价出队。</p><h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><h2 id="结构性质"><a href="#结构性质" class="headerlink" title="结构性质"></a>结构性质</h2><p>二叉堆是一种特殊的堆，二叉堆是完全填满的二元树（二叉树）或者是近似完全填满的二元树（二叉树）。二叉堆有两种：最大堆和最小堆。最大堆：父结点的键值总是大于或等于任何一个子节点的键值；最小堆：父结点的键值总是小于或等于任何一个子节点的键值。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-1.png"><br>因为完全二叉树很有规律，所以它可以用一个数组标识而不需要使用链。<br>后面始终把堆画成树，具体实现将使用简单的数组<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-2.png"><br>一个堆结构将由一个（comparable对象的）数组和一个代表当前堆大小的整数组成。<br><a id="more"></a></p><h2 id="堆序性质"><a href="#堆序性质" class="headerlink" title="堆序性质"></a>堆序性质</h2><p>让操作快速执行的性质是堆序性质(heap-order property)。<br>由于想要快速找出最小元素，因此最小元素应该在根上。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-3.png"><br>因此以常数时间得到附加操作findMin。</p><h2 id="基本的堆操作"><a href="#基本的堆操作" class="headerlink" title="基本的堆操作"></a>基本的堆操作</h2><p>所有的工作都需要保证始终保持堆序性质。</p><h3 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a>insert操作</h3><p>为将一个元素X插入到堆中，在下一个可用位置创建一个空穴，如果X可以放在该空穴中而并不破坏堆的序，那么插入完成。否则，把空穴的父节点上的元素移入该空穴中，这样，空穴就朝着跟的方向向上冒一步，继续该过程直到X能被放入空穴为止。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-4.png"><br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-5.png"><br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-6.png"></p><h3 id="deleteMin"><a href="#deleteMin" class="headerlink" title="deleteMin"></a>deleteMin</h3><p>删除根元素，根节点建立一个空穴，将空穴的两个儿子中较小者移入空穴，这样就把空穴乡下推了一层，重复该步骤直到X可以被放入空穴中。<br>需要考虑堆中存在偶数个元素的时候，将遇到一个节点只有一个儿子的情况<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/pq-7.png"></p><h1 id="优先队列的应用"><a href="#优先队列的应用" class="headerlink" title="优先队列的应用"></a>优先队列的应用</h1><h2 id="选择问题"><a href="#选择问题" class="headerlink" title="选择问题"></a>选择问题</h2><h1 id="java标准库中的优先队列"><a href="#java标准库中的优先队列" class="headerlink" title="java标准库中的优先队列"></a>java标准库中的优先队列</h1><p>未完待续</p><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      优先队列(priority queue)
普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出
（first in, largest out）的行为特征。

#模型模型
优先队列允许至少两种操作的数据结构：insert和deleteMin（删除最小者），它是找出、返回并删除优先队列中最小的元素。
insert等价于入队，deleteMin等价出队。

#二叉堆二叉堆
#结构性质结构性质
二叉堆是一种特殊的堆，二叉堆是完全填满的二元树（二叉树）或者是近似完全填满的二元树（二叉树）。二叉堆有两种：最大堆和最小堆。最大堆：父结点的键值总是大于或等于任何一个子节点的键值；最小堆：父结点的键值总是小于或等于任何一个子节点的键值。
[/uploads/image/pq-1.png]
因为完全二叉树很有规律，所以它可以用一个数组标识而不需要使用链。
后面始终把堆画成树，具体实现将使用简单的数组
[/uploads/image/pq-2.png]
一个堆结构将由一个（comparable对象的）数组和一个代表当前堆大小的整数组成。
    
    </summary>
    
      <category term="java" scheme="http://www.iwyy.top/categories/java/"/>
    
    
      <category term="数据结构" scheme="http://www.iwyy.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>散列</title>
    <link href="http://www.iwyy.top/2017/hash.html"/>
    <id>http://www.iwyy.top/2017/hash.html</id>
    <published>2017-12-22T11:33:00.000Z</published>
    <updated>2018-01-10T13:53:59.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h1><p>散列表的实现常常叫做散列(hashing)。散列是一种用于以常数平均时间执行插入、删除和查找的技术。但是，那些需要元素间任何排序信息的树操作将不会得到有效的支持。</p><h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><h1 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h1><p>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果。但另一方面，散列函数的输入和输出不是一一对应的，如果两个散列值相同，两个输入值很可能是相同的，但不绝对肯定二者一定相等（可能出现哈希碰撞）。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。<br><a id="more"></a></p><h1 id="散列的价值"><a href="#散列的价值" class="headerlink" title="散列的价值"></a>散列的价值</h1><p>散列的价值在于速度<br>假如键没有按照一定的顺序进行保存，那么查询的时候就只能按照顺序进行线性查询，然而，线性查询是最慢的查询方式。所以，将键值按照一定的顺序排序，并且使用二分查找能购有效的提升速度。散列在此之上，更近一步，他将键保存在数组中(数组的查询速度最快)，用数组来表示键的信息，但是由于Map的容量是可变的，而数组的容量是不变的。要解决这个问题，数组中存的并不是键本身，而是键对象生成的一个数字，将其作为数组的下标，这个数字就是散列码。<br>而这种办法所产生的问题就是下标重复。而我们的解决办法就是配合equals来确定键值。<br>查询的过程首先就是计算散列码，然后用散列码来查询函数(下标)，通常，我们的数组中保存的是值的list，因此，我们计算出散列码之后，通过下表取到的对应部分的list，然后通过equals就可以快速找到键值。</p><h1 id="处理冲突方法"><a href="#处理冲突方法" class="headerlink" title="处理冲突方法"></a>处理冲突方法</h1><h2 id="分离链接法"><a href="#分离链接法" class="headerlink" title="分离链接法"></a>分离链接法</h2><p>其做法是将散列到同一个值的所有元素保存到一个表中。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/hash-1.png"><br>执行一次查找，使用散列函数来确定究竟遍历哪个链表。然后在被确定的链表中执行一次查找。执行一次插入，检查响应的链表看看该元素是否已经处在适当的位置(如果允许插入重复元素，那么要留出一个额外的域，这个域当出现匹配事件时增1)。如果这个元素是新的元素，那么它将被插入到链表前端，这个不仅因为方便，还因为常常发生这样的事实：新近插入的元素最有可能不久又被访问。<br>除链表外，任何方案都可以解决冲突现象，一颗二叉树或者另一个散列表都可以，但是最好的解决方案是散列函数是最好的，那么所有的链表都应该是短的。</p><h2 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h2><p>分离链接散列算法的缺点是使用一些链表。由于给新单元分配地址需要时间，因此倒着算法的速度有些减慢，同时算法实际上还要求对第二种数据结构的实现。另一种不用链表解决冲突的方法是尝试另外一些单元，知道找出空的单元为止。因为所有大数据都要放入表内，所以这种解决方案所需要的表要比分离链接散列的表大。一般来说对于不适用分离链接的散列表来说其装填因子应该低于0.5，这样的表叫做侦探散列表。这种通常的冲突解决方案有三种。</p><h3 id="线性侦探法"><a href="#线性侦探法" class="headerlink" title="线性侦探法"></a>线性侦探法</h3><h3 id="平均探测法"><a href="#平均探测法" class="headerlink" title="平均探测法"></a>平均探测法</h3><h3 id="双散列法"><a href="#双散列法" class="headerlink" title="双散列法"></a>双散列法</h3><h2 id="再散列法"><a href="#再散列法" class="headerlink" title="再散列法"></a>再散列法</h2><p>对于使平方探测的开放定址散列法，如果散列表填的太满，那么操作的运行时间将开始消耗过长，且插入操作可能失败。此时，一种解决方案是建立另外一个大约两倍的大的表，而且使用一个相关的新散列函数，扫描整个原始散列表，计算每个元素的新散列值并将其插入到新表中，整个操作就是叫做再散列。</p><h1 id="java标准库中的散列表"><a href="#java标准库中的散列表" class="headerlink" title="java标准库中的散列表"></a>java标准库中的散列表</h1><p>标准库包括Set和Map的散列表的实现：HashSet和HashMap类。HashSet中的项必须提供equals和hashCode方法。它们通常是用分离链接散列实现的。<br>散列表操作中费时多的部分就是计算hashCode方法，String类中的hashCode有个重要优化：每个String对象内部都存储它的hashCode值，初始为0，若hashCode方法被调用，那么就记住这个值，ru过hashCode对同一个String对象第二次计算，则可以避免昂贵的重新计算，这个技巧叫做闪存散列代码。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/hash-2.png"><br>闪存散列代码之所以有效，是因为String类是不可改变的：要是String允许变化，那么它就会使hashCode无效，而重置回0.</p><h1 id="可扩散列"><a href="#可扩散列" class="headerlink" title="可扩散列"></a>可扩散列</h1><p>处理数据量太大以至于装不进主存的情况。</p><h1 id="查找性能分析"><a href="#查找性能分析" class="headerlink" title="查找性能分析"></a>查找性能分析</h1><p>散列表的查找过程基本上和造表过程相同。一些关键码可通过散列函数转换的地址直接找到，另一些关键码在散列函数得到的地址上产生了冲突，需要按处理冲突的方法进行查找。在介绍的三种处理冲突的方法中，产生冲突后的查找仍然是给定值与关键码进行比较的过程。所以，对散列表查找效率的量度，依然用平均查找长度来衡量。<br>查找过程中，关键码的比较次数，取决于产生冲突的多少，产生的冲突少，查找效率就高，产生的冲突多，查找效率就低。因此，影响产生冲突多少的因素，也就是影响查找效率的因素。影响产生冲突多少有以下三个因素：<br>1．散列函数是否均匀；</p><ol><li>处理冲突的方法；<br>3．散列表的装填因子。<br>散列表的装填因子定义为：α= 填入表中的元素个数/散列表的长度<br>α是散列表装满程度的标志因子。由于表长是定值，α与“填入表中的元素个数”成正比，所以，α越大，填入表中的元素较多，产生冲突的可能性就越大；α越小，填入表中的元素较少，产生冲突的可能性就越小。<br>实际上，散列表的平均查找长度是装填因子α的函数，只是不同处理冲突的方法有不同的函数。<br>常用hash算法：<br>（1)MD4<br>（2)MD5<br>（3)SHA-1及其他</li></ol><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      #散列散列
散列表的实现常常叫做散列(hashing)。散列是一种用于以常数平均时间执行插入、删除和查找的技术。但是，那些需要元素间任何排序信息的树操作将不会得到有效的支持。

#散列表散列表
散列表（Hash table，也叫哈希表），是根据关键码值(Key
value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。

#哈希函数哈希函数
给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash)
函数。
所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果。但另一方面，散列函数的输入和输出不是一一对应的，如果两个散列值相同，两个输入值很可能是相同的，但不绝对肯定二者一定相等（可能出现哈希碰撞）。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。
    
    </summary>
    
      <category term="java" scheme="http://www.iwyy.top/categories/java/"/>
    
    
      <category term="数据结构" scheme="http://www.iwyy.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>表、栈和队列</title>
    <link href="http://www.iwyy.top/2017/list.html"/>
    <id>http://www.iwyy.top/2017/list.html</id>
    <published>2017-12-22T11:33:00.000Z</published>
    <updated>2018-01-07T14:15:23.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ADT"><a href="#ADT" class="headerlink" title="ADT"></a>ADT</h1><p>抽象数据类型(abstract data type,ADT)是带有一组操作的对象的集合。<br>对于集合ADT，可以有添加、删除、包含等操作</p><h1 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h1><h2 id="简单数组实现"><a href="#简单数组实现" class="headerlink" title="简单数组实现"></a>简单数组实现</h2><p>对表的所有操作都可以通过使用数组来实现。虽然数组是有固定容量创建的，但在需要的时候可以使用双倍的容量创建一个不同的数组。<br>许多情形下表是通过在末端进行插入操作的，然后只对数组访问。这种情形下数组是一种恰当的实现。然而如果发生一些插入和删除操作，特别是前端进行，那么数组不是一种好的选择。</p><h2 id="简单链表"><a href="#简单链表" class="headerlink" title="简单链表"></a>简单链表</h2><p>为了避免插入和删除的线性开销，需要保证表可以不连续存储，否则表的每个部分都可能需要整体移动。<br>链表是由一系列的节点组成，这些节点不必在内存中相连，每个节点含有表元素和到包含该元素后继元素的节点的链，可以称之为next链，最后一个单元的next链引用null。<br>简单链表删除最后一项比较复杂，因为必须找出指向最后节点的项，把它的next链改成null，然后在更新持有最后节点的链，最好的做法是让每一个节点有一个指向它在表中的前面节点的链称之为双链表<br><a id="more"></a></p><h1 id="java-Collection-API中的表"><a href="#java-Collection-API中的表" class="headerlink" title="java Collection API中的表"></a>java Collection API中的表</h1><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>Collection接口扩展了Iterable接口，实现Iterable接口的类拥有增强for循环，都可以使用forEach进行循环遍历<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface Iterator&lt;E&gt; &#123;</span><br><span class="line">    boolean hasNext();</span><br><span class="line">    E next();</span><br><span class="line">    default void remove() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;remove&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator的remove方法主要优点在于：Collection的remove方法必须先找出需要删除的项。<br>在迭代集合时Collection的remove会抛出ConcurrentModificationException</p><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>java中的增强for循环实际上编译器会重写成如下所示：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于上面增强for循环写法</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="List接口、ArrayList类和LinkedList类"><a href="#List接口、ArrayList类和LinkedList类" class="headerlink" title="List接口、ArrayList类和LinkedList类"></a>List接口、ArrayList类和LinkedList类</h2><p>1、ArrayList类提供了list ADT的一种可增长数组的实现，其优点在于对get和set的调用花费常数时间，其缺点是插入和删除代价昂贵（除了在末端进行）。<br>2、LinkedList类提供了list ADT的双链表实现，其优点是插入和删除均开销很小，在表的前端和末端添加和删除都是常数时间的操作，其缺点是不容易索引，get的调用是昂贵的（除了get第一个和最后一个）。<br>3、对搜索而言，ArrayList和LinkedList都是低效的，对Collection的contains和remove方法的调用均花费线性时间。<br>4、ArrayList中有个容量的概念，它标识基础数组的大小，在需要的时候会自动扩容保证至少具有表的大小，如果早期知道该大小，可以设置容量足够大的量以避免数组容量以后的扩展，trimToSize可以在所有的ArrayList添加操作完成之后使用以避免浪费空间。<br>5、以下方法对于LinkedList操作整个程序线性时间不是二次时间，对于ArrayList是二次时间，因为对于ArrayList即使迭代器位于需要被删除的节点上，其remove方法仍然是昂贵的，因为数组的项必须要移动<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (iterator.next() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="ListIterator接口"><a href="#ListIterator接口" class="headerlink" title="ListIterator接口"></a>ListIterator接口</h2><p>ListIterator扩展了Iterator接口。<br>1、iterator可以应用于所有的集合，Set、List和Map以及这些集合的子类型。而ListIterator只能用于List及其子类型。<br>2、ListIterator有hasPrevious()和previous()方法，可以实现逆向遍历，但是iterator不可以。<br>3、ListIterator可以定位当前索引的位置，nextIndex()和previousIndex()可以实现。Iterator没有此功能。<br>4、ListIterator有add方法，可以向List中添加对象，而Iterator不能。<br>5、ListIterator可以实现对象的修改，set()方法可以实现。Iterator仅能遍历，不能实现修改。都可以实现删除操作。<br>用例：它可以用来从List的所有的偶数中减去1，对于LinkedList来说，不适用ListIterator的set方法是很难做到的。</p><h2 id="简单的ArrayList类的实现"><a href="#简单的ArrayList类的实现" class="headerlink" title="简单的ArrayList类的实现"></a>简单的ArrayList类的实现</h2><p>只供参考理解，编译器会报错<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">AnyType</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">AnyType</span>&gt;  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize;  </span><br><span class="line">    <span class="keyword">private</span> AnyType[] theItems;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> theSize;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//调整容量符合大小  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        ensureCapacity(size());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//确保数组大小足够大  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> newCapacity)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(newCapacity &lt; theSize)  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//复制数据到新数组中  </span></span><br><span class="line">        AnyType[] old = theItems;  </span><br><span class="line">        theItems = (AnyType[]) <span class="keyword">new</span> Object[newCapacity];  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;size(); i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            theItems[i] = old[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnyType <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> theItems[index];  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnyType <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, AnyType newVal)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();  </span><br><span class="line">        &#125;  </span><br><span class="line">        AnyType old = theItems[index];  </span><br><span class="line">        theItems[index] = newVal;  </span><br><span class="line">        <span class="keyword">return</span> old;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, AnyType x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="comment">//数组不够大，则扩大数组  </span></span><br><span class="line">        <span class="keyword">if</span>(theItems.length == size())  </span><br><span class="line">        &#123;  </span><br><span class="line">            ensureCapacity(size()*<span class="number">2</span> + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//从index开始，元素往后移动一位  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = theSize; i &gt; index; i--)  </span><br><span class="line">        &#123;  </span><br><span class="line">            theItems[i] = theItems[i - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//index位置赋值x  </span></span><br><span class="line">        theItems[index] = x;  </span><br><span class="line">        theSize++;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> AanyType <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        AnyType removedItem = theItems[index];  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; size(); i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">//从index位置开始，所有元素都往前移动一位  </span></span><br><span class="line">            theItems[i] = theItems[i + <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        theSize--;  </span><br><span class="line">        <span class="keyword">return</span> removedItem;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> java.util.<span class="function">Iterator&lt;AnyType&gt; <span class="title">iterator</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListIterator&lt;AnyType&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListIterator</span>&lt;<span class="title">AnyType</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">Iterator</span>&lt;<span class="title">AnyType</span>&gt;  </span></span><br><span class="line"><span class="class">    </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">0</span>;  </span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> current &lt; MyArrayList.<span class="keyword">this</span>.size();  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">public</span> AnyType <span class="title">next</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> MyArrayList.<span class="keyword">this</span>.theItems[current++];  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            <span class="comment">//防止迭代器的remove与MyArrayList的remove冲突  </span></span><br><span class="line">            MyArrayList.<span class="keyword">this</span>.remove(--current);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h2 id="简单的LinkedList类的实现"><a href="#简单的LinkedList类的实现" class="headerlink" title="简单的LinkedList类的实现"></a>简单的LinkedList类的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> &lt;<span class="title">AnyType</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">AnyType</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize;    <span class="comment">//双向链表中的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> modCount;    <span class="comment">//这个标记为了配合Iterator实现修改的保护，这一点后面专做论述,凡是做了增删修改，这个标记均变化</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; beginMarker;    <span class="comment">// 双向链表的开始标记</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; endMarker;    <span class="comment">//双向链表的尾部标记</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 构造函数 先初始化双向聊表 调动 clear()函数</span></span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">// 确保双向链表处于空的状态 ----&gt; 我们使用一个辅助的头结点</span></span><br><span class="line">        <span class="comment">// 头标记和尾标记 指向同一个 辅助头结点,和一个辅助的尾节点</span></span><br><span class="line">        beginMarker = <span class="keyword">new</span> Node&lt;AnyType&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        endMarker   = <span class="keyword">new</span> Node&lt;AnyType&gt;(<span class="keyword">null</span>, beginMarker, <span class="keyword">null</span>);</span><br><span class="line">        beginMarker.next = endMarker;</span><br><span class="line">        </span><br><span class="line">        theSize = <span class="number">0</span>;</span><br><span class="line">        modCount ++;    <span class="comment">//zhege</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取元素的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> theSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> theSize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 增删查改的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 默认把元素插入到尾部,其中调用插入到指定位置的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(AnyType x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        add(size()+<span class="number">1</span>, x);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把元素插入到指定位置，其中调用插入到指定元素之前 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> idx, AnyType x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        addBefore(getNode(idx), x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重置某个节点的data值，并返回以前的 data值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnyType <span class="title">set</span><span class="params">(<span class="keyword">int</span> idx, AnyType newVal)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &lt;<span class="number">1</span> || idx &gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"下表越界"</span>));</span><br><span class="line">        Node&lt;AnyType&gt; p = getNode(idx);</span><br><span class="line">        AnyType oldVal = p.data;</span><br><span class="line">        p.data = newVal;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除第idx个节点,调用remove(Node)函数，返回删除节点的data值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnyType <span class="title">remove</span><span class="params">(<span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &lt;<span class="number">1</span> || idx &gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"下表越界"</span>));</span><br><span class="line">        <span class="keyword">return</span> remove(getNode(idx));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 下面这些函数都是一些private的都是位别的一些函数服务的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 在p前面插入 x 元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Node&lt;AnyType&gt;p, AnyType x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node&lt;AnyType&gt; newNode = <span class="keyword">new</span> Node&lt;AnyType&gt;(x, p.prev, p);</span><br><span class="line">        newNode.prev.next = newNode;</span><br><span class="line">        p.prev = newNode;</span><br><span class="line">        theSize ++;        <span class="comment">//添加进来一个新元素之后，别忘了元素个数++</span></span><br><span class="line">        modCount ++;    <span class="comment">//无论增删 该标志 均++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取 idx处的 节点引用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;AnyType&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &lt; <span class="number">1</span> || idx &gt; size()+<span class="number">1</span>)<span class="comment">// 考虑在尾部插入的情况，如果取这个尾节点，其data = null</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"索引越界"</span>));</span><br><span class="line">        Node&lt;AnyType&gt; p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>( idx &lt;= size()/<span class="number">2</span>)    <span class="comment">// 在前半边中找</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = beginMarker.next;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; idx; i++)</span><br><span class="line">                p = p.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;    <span class="comment">//在后半边中找</span></span><br><span class="line">            p = endMarker;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = size(); i &gt;= idx; i--)</span><br><span class="line">                p = p.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回 删除某个节点，并返回这个节点的data值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AnyType <span class="title">remove</span><span class="params">(Node&lt;AnyType&gt; p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p.prev.next = p.next;</span><br><span class="line">        p.next.prev = p.prev;</span><br><span class="line">        theSize --;</span><br><span class="line">        modCount --;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 实现迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;AnyType&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedListIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">AnyType</span>&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;AnyType&gt; current = beginMarker.next;    <span class="comment">//记住当前的位置，这和书序表中类似</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> okToRemove = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">return</span> current!=endMarker;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> AnyType <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 注意了 下面的 保护迭代期间 不允许 越过迭代器修改集合元素的 机制 是精髓</span></span><br><span class="line">            <span class="keyword">if</span>(modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"您刚刚越过迭代器修改了集合元素"</span>));</span><br><span class="line">            <span class="keyword">if</span>(!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"已经没有元素了"</span>));</span><br><span class="line">                </span><br><span class="line">            AnyType nextItem = current.data;</span><br><span class="line">            current = current.next;</span><br><span class="line">            okToRemove = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> nextItem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"您刚刚越过迭代器修改了集合元素"</span>));</span><br><span class="line">            <span class="keyword">if</span>(!okToRemove)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">new</span> Exception(<span class="string">"先next再删除"</span>));</span><br><span class="line">            </span><br><span class="line">            MyLinkedList.<span class="keyword">this</span>.remove(current.prev);</span><br><span class="line">            okToRemove = <span class="keyword">false</span>;    <span class="comment">// 与next()中的 okToRemove = false； 遥相呼应，以确保必须在next()之后才能remove</span></span><br><span class="line">            expectedModCount ++;    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 私有嵌套类的形式，定义内部节点，节点里面没有访问双向链表中的内容，所以使用私有嵌套类可也</span></span><br><span class="line"><span class="comment">     * 如果访问了外面类的属性或者方法就只能使用内部类，去除static关键字,内部类的使用主要是为了可以简写，见单链表中的介绍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">AnyType</span>&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(AnyType d, Node&lt;AnyType&gt;p, Node&lt;AnyType&gt;n)</span> </span>&#123;</span><br><span class="line">            data = d; prev = p; next = n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> AnyType data;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;AnyType&gt; prev;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;AnyType&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈(stack)是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，叫做栈的顶端(top),对栈的操作有push(进栈)和pop(出栈)，前者相对于插入，后者相对于删除最后插入的元素。<br>栈有时又叫做LIFO(后进先出)表。</p><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><p>由于栈是一个表，任何实现表的方法都能实现栈，ArrayList和LinkedList都支持栈操作</p><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p>简单例子：<br>平衡符号：编译器检查程序的语法错误<br>叙述如下：做一个空栈，读入字符知道文件结尾，如果字符是个开放符号则将其推入栈中，如果是个封闭符号则当栈空时报错，否则将栈元素弹出，如果弹出的符号不是对应的开放符号则报错，在文件结尾如果栈非空则报错。</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列也是表，使用队列时，插入在一段，删除则在另一端。<br>队列的基本操作是enqueue(入队)，它在表的末端插入元素，和dequeue(出队)，它删除并返回在表的开头的元素</p><h2 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h2><p>如果栈的情形一样，对于队列而言任何的表的实现都是合法的</p><h2 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h2><p>窗口买票的应用等所有需要先进先出的案例</p><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      #ADTADT
抽象数据类型(abstract data type,ADT)是带有一组操作的对象的集合。
对于集合ADT，可以有添加、删除、包含等操作

#表ADT表ADT
#简单数组实现简单数组实现
对表的所有操作都可以通过使用数组来实现。虽然数组是有固定容量创建的，但在需要的时候可以使用双倍的容量创建一个不同的数组。
许多情形下表是通过在末端进行插入操作的，然后只对数组访问。这种情形下数组是一种恰当的实现。然而如果发生一些插入和删除操作，特别是前端进行，那么数组不是一种好的选择。

#简单链表简单链表
为了避免插入和删除的线性开销，需要保证表可以不连续存储，否则表的每个部分都可能需要整体移动。
链表是由一系列的节点组成，这些节点不必在内存中相连，每个节点含有表元素和到包含该元素后继元素的节点的链，可以称之为next链，最后一个单元的next链引用null。
简单链表删除最后一项比较复杂，因为必须找出指向最后节点的项，把它的next链改成null，然后在更新持有最后节点的链，最好的做法是让每一个节点有一个指向它在表中的前面节点的链称之为双链表
    
    </summary>
    
      <category term="java" scheme="http://www.iwyy.top/categories/java/"/>
    
    
      <category term="数据结构" scheme="http://www.iwyy.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="http://www.iwyy.top/2017/tree.html"/>
    <id>http://www.iwyy.top/2017/tree.html</id>
    <published>2017-12-22T11:33:00.000Z</published>
    <updated>2018-01-07T14:15:30.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树(binary tree)是一棵树，其中每个节点都不能有多余两个的子节点。<br>二叉树的一个性质是一颗平均二叉树的深度要比节点个数N小得多，这个性质有时候很重要。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>因为一个二叉树节点最多有两个子节点，所以可以保存直接链接到它们的链。树节点的声明在结构上类似于双链表的声明，在声明中，节点就是有element的信息加上两个到其他节点的引用(left和right)组成的结构<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryNode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    Object element;</span><br><span class="line">    BinaryNode left;</span><br><span class="line">    BinaryNode right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="例子：表达式树"><a href="#例子：表达式树" class="headerlink" title="例子：表达式树"></a>例子：表达式树</h2><p>表达式树的树叶是操作数，比如：常数或者变量名，而其他的节点为操作符。由于所有的操作都是二元的，因此这棵树正好是二叉树。如下图：<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-1.png"><br><a id="more"></a></p><h1 id="查找树ADT——二叉查找树"><a href="#查找树ADT——二叉查找树" class="headerlink" title="查找树ADT——二叉查找树"></a>查找树ADT——二叉查找树</h1><p>二叉树的一个重要应用就是它们在查找中的使用。<br>使二叉树成为查找树的性质是，对于树中的每个节点X，它的左子树中所有想的值小于X中的项，而它右子树中所有项的值大于X中的项。如下图(假设节点元素都是整数)：<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-2.png"><br>二叉树查找树要求所有的项都能够排序，需要写出一个interface来标识这个性质，这个接口就是Comparable。<br>该接口告诉我们树种的两项总可以使用compareTo方法进行比较。由此可以确定所有其他可能的关系，特别是不适用equals方法，而是根据两项相等当且仅当compareTo方法返回0来判断相等。</p><h2 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h2><p>如果在树T中存在还有项X的节点，那么这个操作需要返回true，如果这样的节点不存在则返回false。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-3.png"></p><h2 id="findMin方法和findMax方法"><a href="#findMin方法和findMax方法" class="headerlink" title="findMin方法和findMax方法"></a>findMin方法和findMax方法</h2><p>这两个private分别返回树中包含最小和最大元素的节点的引用。执行findMin从根开始并且只要有左节点就向左进行，终点就是最小的元素，findMax向右同理。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-4.png"></p><h2 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h2><p>为了将X插入到树T中，可以像用contains那样沿着树查找。如果找到X则什么也不做(或者做一些“更新”)，否则将X插入到遍历的路劲上的最后一点上。<br>重复元素的插入可以通过在节点记录中保留一个附加域以指示发生的频率来处理。这对整个树增加了某些附加空间，但是却比将重复信息放到树中要好（它将使树的深度变得很大）<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-5.png"><br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-6.png"></p><h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><p>如果节点是一片树叶则立即删除。如果节点有一个子节点，则该节点可以在其父节点调整自己的链以绕过该节点后被删除。如果该节点有两个子节点，一般的删除策略是用其右子树的最小数据代替该节点的数据并递归地删除那个节点(现在它是空的)，因为右子树中的最小的节点不可能有左节点，所以第二次remove要容易。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-7.png"><br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-8.png"><br>如果删除的次数不多，通常使用的策略是懒惰删除，当一个元素要被删除时，它仍被保留在树中，而是被标记为删除，这在有重复项时很常用，因为此时记录出现频率数的域可以减1.</p><h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p>AVL树是带有平衡条件的二叉查找树。这个平衡条件必须要容易保持，而且它保证树的深度需是O(log N)。最简单的想法是要求左右子树具有相同的高度。另一种平衡条件是要求每个节点都必须有相同高度的左子树和右子树。</p><h2 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h2><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-9.png"><h2 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h2><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-10.png"><h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p>遍历的一般方法是首先处理左子树，然后是当前节点，最后是右子树。这个算法的有趣部分除它简单的特性外，还在于其总的运行时间是O(N)。<br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-11.png"><br><img src="/js/lazyload-plugin/loading.svg" data-original="/uploads/image/tree-12.png"></p><h1 id="标准库中的集合与映射"><a href="#标准库中的集合与映射" class="headerlink" title="标准库中的集合与映射"></a>标准库中的集合与映射</h1><p>List容器即ArrayList和Linkedlist用于查找效率很低。因此,Collections API提供了两个附加容器Set和Map，它们对诸如插入、删除、和查找等基本操作提供有效的实现。</p><h2 id="关于Set接口"><a href="#关于Set接口" class="headerlink" title="关于Set接口"></a>关于Set接口</h2><p>Set接口代表不允许重复元素的Collection。由接口SortedSet给出的一种特殊类型的Set保证其中的各项处于有序的状态。</p><h2 id="关于Map接口"><a href="#关于Map接口" class="headerlink" title="关于Map接口"></a>关于Map接口</h2><p>Map是一个接口，代表由关键字以及它们的值组成的一些项的集合。关键字必须是唯一的，但是若干关键字可以映射到一些相同的值。在SortMap接口中，映射中的关键字保持逻辑上有序的状态。<br>通过一个Map进行迭代要比Colection复杂，因为Map不提供迭代器而是提供3种方法讲Map对象的视图最为Collection对象返回。由于这些视图本身就是Collection，因此它们可以被迭代。如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Set&lt;KeyType&gt; <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Collection&lt;ValueType&gt; <span class="title">values</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;Map.Entry&lt;keyType.ValueType&gt;&gt; <span class="title">entrySet</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p></p><h2 id="TreeSet类和TreeMap类的实现"><a href="#TreeSet类和TreeMap类的实现" class="headerlink" title="TreeSet类和TreeMap类的实现"></a>TreeSet类和TreeMap类的实现</h2><p>Java要求TreeSet和TreeMap支持基本的add、remove和contains操作以对数最坏情形时间完成，因此基本的实现方法就是平衡二叉查找树。一般并不适用AVL树，而是使用一些自顶向下的红黑树。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>表达式树是更一般结构即所谓分析树的一个小例子，分析树是编译器设计中的核心数据结构。分析树不是二叉树，而是表达式树相对简单的扩充。<br>查找树在算法实际中是非常重要的，几乎支持所有有用的操作，而其对数平均开销很小。查找树的问题在于其性能严重依赖输入，而输入是随机的。处理这个问题的几种平衡树方案：AVL数、伸展树、B树等。<br>在实践中，所有平衡树方案的运行时间对于插入和删除操作(除查找稍微快一些)都不如简单二叉树省时，但一般来说是可以接受的，它防止轻易得到最坏情形的输入。<br>通过将一些元素插入到查找树然后执行一次中序遍历，我们得到的是拍过顺序的元素。</p><script src="/js/lazyload-plugin/lazyload.intersectionObserver.min.js"></script>]]></content>
    
    <summary type="html">
    
      #二叉树二叉树
二叉树(binary tree)是一棵树，其中每个节点都不能有多余两个的子节点。
二叉树的一个性质是一颗平均二叉树的深度要比节点个数N小得多，这个性质有时候很重要。

#实现实现
因为一个二叉树节点最多有两个子节点，所以可以保存直接链接到它们的链。树节点的声明在结构上类似于双链表的声明，在声明中，节点就是有element的信息加上两个到其他节点的引用(left和right)组成的结构


1
2
3
4
5
6


class BinaryNode
{
    Object element;
    BinaryNode left;
    BinaryNode right;
}




#例子：表达式树例子：表达式树
表达式树的树叶是操作数，比如：常数或者变量名，而其他的节点为操作符。由于所有的操作都是二元的，因此这棵树正好是二叉树。如下图：
[/uploads/image/tree-1.png]
    
    </summary>
    
      <category term="java" scheme="http://www.iwyy.top/categories/java/"/>
    
    
      <category term="数据结构" scheme="http://www.iwyy.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
